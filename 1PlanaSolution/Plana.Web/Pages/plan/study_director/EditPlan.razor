@page "/editplan/{id}"
@page "/editplan"
@using MatBlazor;
@*@using Plana.Models;*@
@using Plana.Shared;
@using Plana.Web.Pages.plan.study_director;
@using Microsoft.Extensions.Logging
@inject ILogger<EditPlan> Logger

@inject IJSRuntime js

@inherits EditPlanBase
@if (Plan == null || Plans == null) { return; }


<Plana.Web.Pages.template_components.CustomSelect />

<div class="btn-group">
    <button id="addNewModule" @onclick="@(e=>OpenDialogMNew(false))" style="float: right;">Add Module</button>
    <button @onclick="@(e=>OpenDialog(false))" style="float: right;">last year plan</button>
</div>

<div class="btn-groupR">
    <button>Share with professors on @Plan.PublishDateForProfessors </button>
    <button>Official publish on @Plan.OfficialPublishDate</button>

</div>

@*Modules Table*@

@if (Plan == null)
{
    <text>Loading...</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th width="10%">ModuleRunId</th>
                <th>Semester</th>
                <th>Module</th>
                <th>Module Title</th>
                <th>Module-Group</th>
                <th>Place</th>
                <th>Module Total Hours</th>
                <th>Lecturers Group</th>
                <th>Lecturers</th>
                <th>Set Lecturers hours</th>
                <th>Desired hours</th>
                <th>Actions</th>
                <th>notes</th>
            </tr>
        </thead>
        <tbody>
            @if (Semesters != null)
            {
                @foreach (var sem in Semesters)
                {

                    @*fix it , the problem is that when the sem == null, program is break up*@
                    @*@if (sem.ModuleRuns == null) { return; }*@
                    @if (sem.ModuleRuns == null) { continue; }

                    @foreach (var mr in sem.ModuleRuns)
                    {
                        int local = mr.ModuleRunId;
                        <tr>@local</tr>

                        <tr>
                            @*<td>
                                    <button class="btn" id="add" @onclick="@(e => OpenLecturerDialog(false,local))"><i class="fa fa-plus"></i></button>
                                </td>*@
                            <td><input Id="SelectedId" @bind="mr.ModuleRunId" /></td>
                            <td>@sem.GetAbbreviation()</td>

                            <td contenteditable='true'>@mr.Module.Code</td>
                            <td>@mr.Module.Title</td>
                            <td>@mr.ModuleGroup</td>
                            <td contenteditable="true">@mr.Place</td>
                            <td contenteditable="true">@mr.Module.TotalHours</td>
                            <td>

                                @if (mr.ModuleRunLecturerGroups != null)
                                {

                                    @foreach (var lg in mr.ModuleRunLecturerGroups)
                                    {
                                        <p style="white-space:nowrap;">
                                            @lg.LecturerGroup.Title
                                            <button class="btn" id="del"><i class="fa fa-close"></i></button>
                                        </p>
                                    }
                                }
                                <button class="btn" id="add"><i class="fa fa-plus"></i></button>
                                @*<button class="btn" id="add" @onclick="@(e => OpenLecturerGDialog(false))"><i class="fa fa-plus"></i></button>*@
                            </td>

                            @if (mr.LecturersMR != null)
                            {
                                <td style="white-space:nowrap;">
                                    <div id="scroll">
                                        @foreach (var lm in mr.LecturersMR)
                                        {

                                        <p style="white-space:nowrap;">
                                            @lm.Lecturer.SetToken() |  @if (lm.IsRequested == true)
                                            {
                                                @request
                                             }
                                            <button class="btn" id="del" @onclick="@(e => LecturerModuleRunService.DeleteLecturerModuleRun(lm.ModuleRunId, lm.LecturerId))"><i class="fa fa-close"></i></button>
                                        </p>
                                        }

                                        <button class="btn" id="add" @onclick="@(e => OpenLecturerDialog(false,local))"><i class="fa fa-plus"></i></button>

                                    </div>
                                </td>
                                <td contenteditable='true'>
                                    @foreach (var lm in mr.LecturersMR)
                                    {
                                        <MatTextField @bind-Value="lm.Hours" style=" height: 20px;"></MatTextField>
                                        <MatButton type="submit" name="HandleValidSubmit"  @onclick="@(e => LecturerModuleRunService.UpdateLecturerModuleRun(lm))" Style="width:20px;height:20px">OK</MatButton>
                                    }
                                    @if (mr.IsExceedingSetHours())
                                    {
                                     
                                        <i class="material-icons" style="font-size:24px">warning</i>
                                    }
                                </td>
                                <td>
                                    @foreach (var lm in mr.LecturersMR)
                                    {
                                        <p style="color:lightcoral;"> @lm.DesiredHours.</p>

                                    }

                                    @if (mr.IsExceedingHours())
                                    {
                                        @*<div class="w3-panel w3-pale-red w3-border" >
                                             <h3>Attention!</h3>
                                             <p>The number of desired hours exceeds the norm</p>
                                            </div>*@
                                        <i class="material-icons" style="font-size:24px">warning</i>
                                    }
                                </td>

                            }
                            <td style="white-space:nowrap;" @onclick="CallJSMethod2">
                                <button class="btn" id="edit-btn">edit</button>
                                <button class="btn" id="delete-btn" @onclick="@(e=>ModuleRunService.SoftDeleteModuleRun(mr.ModuleRunId))">delete</button>
                                <button class="btn" id="cancel-btn">cancel</button>
                                <MatButton Raised="true" @onclick="@(e => OpenDialogM(true,local))" Icon="edit" title="Edit ModuleRun"></MatButton>

                                @*dialog to update Module Run*@
                                <MatDialog @bind-IsOpen="dialogIsOpenM" @bind-Value="@choosedModuleRun.ModuleRunId">
                                    <MatDialogTitle>Add / Edit Module</MatDialogTitle>
                                    <MatDialogContent>
                                        <h3>@choosedModuleRun.ModuleRunId</h3>
                                        @*<MatTextField Label="Module Title" @bind-Value="@choosedModuleRun.Module.Title"></MatTextField>*@
                                        <MatTextField Label="Place" @bind-Value="@choosedModuleRun.Place"></MatTextField>
                                        <MatTextField Label="CodeGroup" @bind-Value="@choosedModuleRun.Code"></MatTextField>
                                    </MatDialogContent>
                                    <MatDialogActions>
                                        <MatButton OnClick="okClickM">Add</MatButton>
                                        <MatButton OnClick="CloseDialogM">Close</MatButton>

                                    </MatDialogActions>
                                </MatDialog>
                            </td>
                            <td><textarea>...</textarea></td>

                        </tr>

                        <MatDialog @bind-IsOpen="LdialogIsOpen">
                            <MatDialogTitle>Add Professor</MatDialogTitle>
                            <MatDialogContent Style="width: 400px; height: 200px; right: 50px">
                                <h3>@choosedModuleRun.ModuleRunId </h3>
                                <h3>@mr.ModuleRunId | @mr.Module.Title </h3>
                                <EditForm Model="@mr">
                                    <select class="form-control" @bind="SelectedLecturer.Id">
                                        @foreach (var lecturer in Lecturers)
                                        {
                                            <option value="@lecturer.Id">
                                                @lecturer.SetToken()
                                            </option>
                                        }
                                    </select>
                                </EditForm>

                            </MatDialogContent>
                            <MatDialogActions>
                                <button @onclick="@(e=>addLecturer(choosedModuleRun.ModuleRunId,SelectedLecturer.Id))"> Test</button>

                                <MatButton OnClick="@(e=>addLecturer(choosedModuleRun.ModuleRunId,SelectedLecturer.Id))">Add</MatButton>
                                <MatButton OnClick="CloseDialog">Close</MatButton>
                            </MatDialogActions>
                        </MatDialog>
                    }
                }
            }
        </tbody>
    </table>
}

@*dialog for last year plan *@
<MatDialog @bind-IsOpen="dialogIsOpen">
    <MatDialogTitle>Add Plan</MatDialogTitle>
    <MatDialogContent Style="width: 750px;right:50px">
        @if (Plan == null)
        {
            <text>Loading...</text>
        }
        else
        {
        <table class="table">
            <thead>
                <tr>
                    
                    <th>Semester</th>
                    <th>Module</th>
                    <th>Module Title</th>
                    <th>Module-Group</th>
                    <th>Place</th>
                    <th>Module Total Hours</th>
                    <th>Lecturers Group</th>
                    <th>Lecturers</th>
                    <th>Set Lecturers hours</th>
                    <th>Desired hours</th>
                    <th>Actions</th>
                    <th>notes</th>
                </tr>
            </thead>
            <tbody>
                @if (Semesters != null)
                {
                    @foreach (var sem in Semesters)
                    {

                       
                        @if (sem.ModuleRuns == null) { continue; }

                        @foreach (var mr in sem.ModuleRuns)
                        {
                            int local = mr.ModuleRunId;
                            

                            <tr>
                                
                                
                                <td>@sem.GetAbbreviation()</td>

                                <td>@mr.Module.Code</td>
                                <td>@mr.Module.Title</td>
                                <td>@mr.ModuleGroup</td>
                                <td>@mr.Place</td>
                                <td>@mr.Module.TotalHours</td>
                                <td>

                                    @if (mr.ModuleRunLecturerGroups != null)
                                    {

                                        @foreach (var lg in mr.ModuleRunLecturerGroups)
                                        {
                                            <p style="white-space:nowrap;">
                                                @lg.LecturerGroup.Title
                                                <button class="btn" id="del"><i class="fa fa-close"></i></button>
                                            </p>
                                        }
                                    }
                                    <button class="btn" id="add"><i class="fa fa-plus"></i></button>
                                    @*<button class="btn" id="add" @onclick="@(e => OpenLecturerGDialog(false))"><i class="fa fa-plus"></i></button>*@
                                </td>

                                @if (mr.LecturersMR != null)
                                {
                                    <td style="white-space:nowrap;">
                                        <div id="scroll">
                                            @foreach (var lm in mr.LecturersMR)
                                            {

                                                <p style="white-space:nowrap;">
                                                    @lm.Lecturer.SetToken() | @lm.Hours
                                                    <button class="btn" id="del" @onclick="@(e => LecturerModuleRunService.DeleteLecturerModuleRun(lm.ModuleRunId, lm.LecturerId))"><i class="fa fa-close"></i></button>
                                                </p>
                                            }

                                            <button class="btn" id="add" @onclick="@(e => OpenLecturerDialog(false,local))"><i class="fa fa-plus"></i></button>

                                        </div>
                                    </td>
                                    <td contenteditable='true'>
                                        @foreach (var lm in mr.LecturersMR)
                                        {
                                            <MatTextField @bind-Value="lm.Hours" style=" height: 25px;"></MatTextField> <button class="btn" id="save-btn">save</button>
                                            <MatButton type="submit" name="HandleValidSubmit" @onclick="@(e => LecturerModuleRunService.UpdateLecturerModuleRun(lm))">save</MatButton>
                                        }
                                        @if (mr.IsExceedingSetHours())
                                        {

                                            <i class="material-icons" style="font-size:24px">warning</i>
                                        }
                                    </td>
                                    <td>
                                        @foreach (var lm in mr.LecturersMR)
                                        {
                                            <p style="color:lightcoral;"> @lm.DesiredHours.</p>

                                        }

                                        @if (mr.IsExceedingHours())
                                        {
                                           
                                            <i class="material-icons" style="font-size:24px">warning</i>
                                        }
                                    </td>

                                }
                                <td style="white-space:nowrap;" @onclick="CallJSMethod2">
                                    <button class="btn" id="edit-btn">edit</button>
                                    <button class="btn" id="delete-btn" @onclick="@(e=>ModuleRunService.SoftDeleteModuleRun(mr.ModuleRunId))">delete</button>
                                    <button class="btn" id="cancel-btn">cancel</button>
                                    <MatButton Raised="true" @onclick="@(e => OpenDialogM(true,local))" Icon="edit" title="Edit ModuleRun"></MatButton>

                                    @*dialog to update Module Run*@
                                    <MatDialog @bind-IsOpen="dialogIsOpenM" @bind-Value="@choosedModuleRun.ModuleRunId">
                                        <MatDialogTitle>Add / Edit Module</MatDialogTitle>
                                        <MatDialogContent>
                                            <h3>@choosedModuleRun.ModuleRunId</h3>
                                            @*<MatTextField Label="Module Title" @bind-Value="@choosedModuleRun.Module.Title"></MatTextField>*@
                                            <MatTextField Label="Place" @bind-Value="@choosedModuleRun.Place"></MatTextField>
                                            <MatTextField Label="CodeGroup" @bind-Value="@choosedModuleRun.Code"></MatTextField>
                                        </MatDialogContent>
                                        <MatDialogActions>
                                            <MatButton OnClick="okClickM">Add</MatButton>
                                            <MatButton OnClick="CloseDialogM">Close</MatButton>

                                        </MatDialogActions>
                                    </MatDialog>
                                </td>
                                <td><textarea>...</textarea></td>

                            </tr>

                            <MatDialog @bind-IsOpen="LdialogIsOpen">
                                <MatDialogTitle>Add Professor</MatDialogTitle>
                                <MatDialogContent Style="width: 400px; height: 200px; right: 50px">
                                    <h3>@choosedModuleRun.ModuleRunId </h3>
                                    <h3>@mr.ModuleRunId | @mr.Module.Title </h3>
                                    <EditForm Model="@mr">
                                        <select class="form-control" @bind="SelectedLecturer.Id">
                                            @foreach (var lecturer in Lecturers)
                                            {
                                                <option value="@lecturer.Id">
                                                    @lecturer.SetToken()
                                                </option>
                                            }
                                        </select>
                                    </EditForm>

                                </MatDialogContent>
                                <MatDialogActions>
                                    <button @onclick="@(e=>addLecturer(choosedModuleRun.ModuleRunId,SelectedLecturer.Id))"> Test</button>

                                    <MatButton OnClick="@(e=>addLecturer(choosedModuleRun.ModuleRunId,SelectedLecturer.Id))">Add</MatButton>
                                    <MatButton OnClick="CloseDialog">Close</MatButton>
                                </MatDialogActions>
                            </MatDialog>
                        }
                    }
                }
            </tbody>
        </table>
        }


    </MatDialogContent>
    <button type="submit" class="btn-btn-success">
        Copy to actual
    </button>
</MatDialog>


@*Dialog for making a new module*@
<EditForm Model="@moduleRun" OnInvalidSubmit="@okClickM">
    <MatDialog @bind-IsOpen="dialogIsOpenMNew">
        <MatDialogTitle>Add Module</MatDialogTitle>
        <MatDialogContent Style="width: 500px;right:50px">
            <div class="form-group row">
                <label for="semester">Semester</label>
            </div>
            <div class="col-sm-10">
                <InputSelect id="semester" @bind-Value="@moduleRun.SemesterId" class="form-control">
                    @foreach (var sem in Semesters)
                    {
                        <option value="@sem.SemesterId">@sem.GetAbbreviation()</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group row">
                <label for="semester">Module Title</label>
            </div>
            <div class="col-sm-10">
                <InputSelect id="module" @bind-Value="@moduleRun.ModuleId" class="form-control">
                    @foreach (var module in Modules)
                    {
                        <option value="@module.ModuleId">@module.ModuleId | @module.Title</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group row">
                <label for="Place" class="col-sm-2 col-form-label">

                </label>
                <div class="col-sm-10">
                    <InputText id="Place" class="form-control" placeholder="Place"
                               @bind-Value="@moduleRun.Place" />
                </div>
            </div>
            <div>
                Active<br />
                <MatCheckbox @bind-Value="@moduleRun.Editable" Label="@(ChangeLabel(ModuleRun.Editable))"></MatCheckbox>
            </div>
        </MatDialogContent>
        <MatButton type="submit" name="HandleValidSubmit" @onclick="@(e=>addModuleRun())">OK</MatButton>
        <MatButton Type="cancel" Name="Cancel" @onclick="@(e=>CloseDialog())">X</MatButton>


    </MatDialog>
</EditForm>


@*dialog for moduleRun*@



@code {

    #region variables
    string request { get; set; } = "R";
    bool loadFailed;
    #endregion


    /// <summary>
    /// js code for button
    ///
    ///  </summary>

    protected override async void OnAfterRender(bool firstRender)
    {
        await js.InvokeVoidAsync("renderjQueryComponents");
        base.OnAfterRender(firstRender);
        await js.InvokeVoidAsync("SetButtonsVisible");

    }

    private async Task CallJSMethod()
    {

        //await JS.InvokeVoidAsync("CollapseTableRow");
        await js.InvokeVoidAsync("GetName");

    }
    private async Task CallJSMethod2()
    {
        await js.InvokeVoidAsync("SetButtonsVisible");
    }

    #region Last Year Plan

    #endregion
    #region Dialog Box Methods for Last Year Plan
    bool _isDelete = false;
    bool dialogIsOpen = false;
    bool _isEdit = false;
    private void OpenDialog(bool isEdit)
    {

        //if (!_isEdit) plan = new Plan();
        dialogIsOpen = true;
    }
    private void okCklick()
    {
        dialogIsOpen = false;

    }
    private void CloseDialog()
    {
        dialogIsOpen = false;
        LdialogIsOpen = false;
        dialogIsOpenM = false;
        dialogIsOpenMNew = false;

    }
    #endregion

    #region dialog for lecturers

    bool LdialogIsOpen = false;
    bool _isEditL = false;
    LecturerModuleRunDto newLmr = new LecturerModuleRunDto();
    ModuleRunDto SelectedMR { get; set; }
    public int ModuleRunId;

    public ModuleRunDto choosedModuleRun = new ModuleRunDto();
    [Parameter]
    public int moduleRunIdChoosed { get; set; }

    private async Task OpenLecturerDialog(bool isEditL, int choosedModuleRunId)
    {
        moduleRunIdChoosed = choosedModuleRunId;
        choosedModuleRun = await moduleRunService.GetModuleRun(moduleRunIdChoosed);
        _isEditL = isEditL;
        LdialogIsOpen = true;
    }
    private void okClickL()
    {

        LdialogIsOpen = false;

    }
    private void LCloseDialog()
    {
        LdialogIsOpen = false;


    }

    async Task addLecturer(int moduleRunId, int lecturerId)
    {
        try
        {
            LecturerModuleRunDto lecturerModuleRun = new LecturerModuleRunDto()
            {
                LecturerId = lecturerId,
                ModuleRunId = moduleRunId
            };
            lecturerModuleRun = await LecturerModuleRunService.CreateLecturerModuleRun(lecturerModuleRun);
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Logger.LogWarning(ex, "The selected Lecturer is already addet to this module");

        }


        LdialogIsOpen = false;
    }
    #endregion

    #region moduleRun

    string labelName1 = "setEditable";
    string labelName2 = "Disable";


    string ChangeLabel(bool val)
    {
        return !val ? labelName1 : labelName2;
    }

    [Inject]
    public IModuleRunService moduleRunService { get; set; }

    ModuleRunDto moduleRun = new ModuleRunDto();
    ModuleRunDto SelectedModuleRun { get; set; } = new ModuleRunDto();
    bool dialogIsOpenM = false;
    bool dialogIsOpenMNew = false;
    bool _isEditM = false;

    bool snackBarM = false;

    #region Methods



    private void DeleteModuleRun()
    {

        snackBarM = true;
    }
    #endregion

    #region Dialog Box Methods
    private async Task OpenDialogM(bool isEditM, int choosedModuleRunId)
    {
        moduleRunIdChoosed = choosedModuleRunId;
        choosedModuleRun = await moduleRunService.GetModuleRun(moduleRunIdChoosed);



        _isEditM = isEditM;
        dialogIsOpenM = true;
    }
    private void OpenDialogMNew(bool isEditM)
    {
        _isEditM = isEditM;
        dialogIsOpenMNew = true;
    }
    private async void okClickM()
    {
        dialogIsOpenM = false;
        dialogIsOpenMNew = false;
        //if (moduleRun.ModuleRunId != 0)
        //{
        //    await ModuleRunService.UpdateModuleRun(moduleRun);
        //}
        //else {
        //    moduleRun = await ModuleRunService.CreateModuleRun(moduleRun);
        //}

        await ModuleRunService.UpdateModuleRun(choosedModuleRun);

    }
    async Task addModuleRun()
    {
        await ModuleRunService.CreateModuleRun(moduleRun);
        CloseDialogM();
    }
    private void CloseDialogM()
    {
        dialogIsOpenM = false;
        dialogIsOpenMNew = false;
        dialogIsOpenMNew = false;

    }

    #endregion
    #endregion
}

<style>
    .mdc-text-field__ripple MatTextField {
        width: 24px;
    }
</style>
