@page "/editplan/{id}"
@page "/editplan"
@using MatBlazor;
@*@using Plana.Models;*@
@using Plana.Shared;
@using Plana.Web.Pages.plan.study_director;
@using Microsoft.Extensions.Logging
@inject ILogger<EditPlan> Logger

@inject IJSRuntime js

@inherits EditPlanBase
@*@if (lastYearPlan != null)
{
    <p>@lastYearPlan.Id</p>}*@

@if (Plan == null || Plans == null) { return; }
@*<p>@Plan.FindLastYearPlan()</p>*@




<div class="selectYear">
    <form>
        <select class="form-control" @bind="SelectedPlanId">

            @foreach (var plan in Plans)
            {

                <option value="@plan.Id">@plan.Year</option>
            }
        </select>
        <div class="btn-group">
            <button @onclick="NavigateToModulesPlanPage">
                show plan


            </button>

        </div>
    </form>


</div>
@*<Plana.Web.Pages.template_components.CustomSelect />*@

<div class="btn-group">
    <button id="addNewModule" @onclick="@(e=>OpenDialogMNew(false))" style="float: right;">Add Module</button>
    <button @onclick="@(e=>OpenDialog(false))" style="float: right;">last year plan</button>
    <button id="addNewModule" @onclick="@(e=>ShowDates())">Publish Dates</button>
    <MatButton Type="delete" OnClick="@(e=>OpenDialogP(false))">Edit Plan</MatButton>
    <MatButton Type="delete" OnClick="@(e=>DeletePlan())">Delete Plan</MatButton>
</div>
@if (showDates)
{
<div class="btn-groupR">

    <button>Share with professors on @Plan.PublishDateForProfessors </button>

    <button>Official publish on @Plan.OfficialPublishDate</button>

</div>
}
@*dialog to Plan*@
<MatDialog @bind-IsOpen="dialogIsOpenP" @bind-Value="@Plan.Id">
    <MatDialogTitle>Add / Edit Plan</MatDialogTitle>
    <MatDialogContent>
        @*<EditForm Model="@Plan">*@
        <div>
            Active<br />
            <MatCheckbox @bind-Value="Plan.IsModifyable" Label="@(ChangeLabelPlan(Plan.IsModifyable))"></MatCheckbox>
            <MatTextField Label="Plan Year" @bind-Value="@Plan.Year"></MatTextField>
            <MatTextField Label="Publish date for professors" @bind-Value="@Plan.PublishDateForProfessors"></MatTextField>
            <MatTextField Label="Publish date" @bind-Value="@Plan.OfficialPublishDate"></MatTextField>

            <MatTextField Label="Autumn Semester" @bind-Value="@AutumnSemester.Code"placeholder="0000-0000-HS"></MatTextField>
            <MatTextField Label="Spring Semester" @bind-Value="@SpringSemester.Code" placeholder="0000-FS"></MatTextField>


        </div>
            <MatButton Type="submit" @onclick="@(e=>PlanService.UpdatePlan(Plan))">Save</MatButton>
        @*</EditForm>*@

        
      

    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(e=>okClickP(Plan))">Save</MatButton>
        <MatButton OnClick="CloseDialog">Close</MatButton>

    </MatDialogActions>
</MatDialog>

@*Modules Table*@

@if (Plan == null)
{
    <text>Loading...</text>
}
else
{
    <table class="table">
        <thead>
            <tr>
                @*<th width="10%">ModuleRunId</th>*@
                <th>Semester</th>
                <th>Module</th>
                @*<th>Module </th>*@
                <th>Module-Group</th>
                <th>Place</th>
                <th>Module Total Hours</th>
                <th>To plan</th>
                <th>Lecturers Group</th>
                <th>Lecturers</th>
                <th>Desired hours</th>
                <th>
                    @*Set Lecturers hours*@ 
                    @if(showHours)
                    {<MatButton class="btn" Type="submit" @onclick="@(e => ShowSetHours())">set hours</MatButton>}
                   else { 
                     <MatButton class="btn" Type="cancel" @onclick="@(e => ShowSetHours())">X</MatButton>
                    }
                 </th>
                <th>Actions</th>
                <th>notes</th>
            </tr>
        </thead>
        <tbody>
            @if (Semesters != null)
            {
                @foreach (var sem in Semesters)
                {

                    @*fix it , the problem is that when the sem == null, program is break up*@
                    @*@if (sem.ModuleRuns == null) { return; }*@
                    @if (sem.ModuleRuns == null) { continue; }

                    @foreach (var mr in sem.ModuleRuns)
                    {
                        int local = mr.ModuleRunId;
                        <tr>
                            @*<td><input Id="SelectedId" @bind="mr.ModuleRunId" /></td>*@
                            <td>@sem.GetAbbreviation()</td>

                            <td>(@mr.Module.Code) @mr.Module.Title</td>
                            @*<td>@mr.Module.Title</td>*@
                            <td>@mr.ModuleGroup</td>
                            <td>@mr.Place</td>
                            <td>@mr.Module.TotalHours</td>
                            <td>
                                <p style="color:darkorchid;">
                                    @mr.HoursToPlan()
                                    @if (mr.IsExceedingSetHours())
                                    {

                                        <i class="material-icons" style="font-size:24px">warning</i>
                                    }
                                </p>
                            </td>
                            <td>

                                @if (mr.ModuleRunLecturerGroups != null)
                                {

                                    @foreach (var lg in mr.ModuleRunLecturerGroups)
                                    {
                                        <p style="white-space:nowrap;">
                                            @lg.LecturerGroup.Title |


                                            <button class="btn" id="del" @onclick="@(e=>DeleteModuleRunLecturerGroup(lg))"><i class="fa fa-close"></i></button>
                                            @foreach (var llg in lg.LecturerGroup.LecturerLecturerGroup)
                                            {
                                            <p> @llg.Lecturer.FirstName</p>
                                        }
                                            </p>
                                        }
                                }
                                <button class="btn" id="add" @onclick="@(e=>OpenDialogLecturerGroup(false,local))"><i class="fa fa-plus"></i></button>
                                @*<button class="btn" id="add" @onclick="@(e => OpenLecturerGDialog(false))"><i class="fa fa-plus"></i></button>*@
                            </td>

                            @if (mr.LecturersMR != null)
                            {
                                <td style="white-space:nowrap;">
                                    <div id="scroll">
                                        @foreach (var lm in mr.LecturersMR)
                                        {

                                            int localLId = lm.LecturerId;
                                            <p style="white-space:nowrap;">
                                                @lm.Lecturer.SetToken() |@lm.Hours|  @if (lm.IsRequested == true)
                                                {
                                                    @request
                                                }
                                                @*<button class="btn" id="del" @onclick="@(e => DeleteLecturerModuleRun(local,localLId))"><i class="fa fa-close"></i></button>*@
                                                <button class="btn" id="del" @onclick="@(e=> LecturerModuleRunService.DeleteLecturerModuleRun(lm.ModuleRunId,lm.LecturerId))"><i class="fa fa-close"></i></button>
                                            </p>
                                        }


                                        <button class="btn" id="add" @onclick="@(e => OpenLecturerDialog(false,local))"><i class="fa fa-plus"></i></button>

                                    </div>
                                </td>
                                <td>
                                    @foreach (var lm in mr.LecturersMR)
                                    {
                                        <p style="color:lightcoral;"> @lm.DesiredHours.</p>

                                    }

                                    @if (mr.IsExceedingHours())
                                    {
                                        @*<div class="w3-panel w3-pale-red w3-border" >
                                     <h3>Attention!</h3>
                                     <p>The number of desired hours exceeds the norm</p>
                                    </div>*@
                                        <i class="material-icons" style="font-size:24px">warning</i>
                                    }
                                </td>
                                <td>
                                    @foreach (var lm in mr.LecturersMR)
                                    {

                                        if (!showHours)
                                        {
                                            <MatTextField @bind-Value="lm.Hours"></MatTextField>
                                            <button class="btn" id="save-btn" @onclick="@(e => LecturerModuleRunService.UpdateLecturerModuleRun(lm))">save</button>

                                        }
                                    }
                                </td>


                            }

                            <td style="white-space:nowrap;">

                                <button class="btn" id="edit-btn" @onclick="@(e => OpenDialogM(true, local))">edit</button>

                                <button class="btn" id="delete-btn" @onclick="@(e => RemoveModuleRun(local))">delete</button>
                                @*<button class="btn" id="cancel-btn">cancel</button>*@
                                @*<MatButton Raised="true" @onclick="@(e => OpenDialogM(true, local))" Icon="edit" title="Edit ModuleRun"></MatButton>*@

                                @*dialog to update Module Run*@
                                <MatDialog @bind-IsOpen="dialogIsOpenM" @bind-Value="@choosedModuleRun.ModuleRunId">
                                    <MatDialogTitle>Add / Edit Module</MatDialogTitle>
                                    <MatDialogContent>
                                        <h3>@choosedModuleRun.ModuleRunId</h3>
                                        @*<MatTextField Label="Module Title" @bind-Value="@choosedModuleRun.Module.Title"></MatTextField>*@
                                        <MatTextField Label="Place" @bind-Value="@choosedModuleRun.Place"></MatTextField>
                                        <MatTextField Label="CodeGroup" @bind-Value="@choosedModuleRun.Code"></MatTextField>
                                    </MatDialogContent>
                                    <MatDialogActions>
                                        <MatButton OnClick="okClickM">Save</MatButton>
                                        <MatButton OnClick="CloseDialogM">Close</MatButton>

                                    </MatDialogActions>
                                </MatDialog>
                            </td>
                            <td><textarea>...</textarea></td>

                        </tr>

                        <MatDialog @bind-IsOpen="LdialogIsOpen">
                            <MatDialogTitle>Add Professor</MatDialogTitle>
                            <MatDialogContent Style="width: 400px; height: 200px; right: 50px">
                                <h3>@choosedModuleRun.ModuleRunId </h3>
                                <h3>@mr.ModuleRunId | @mr.Module.Title </h3>
                                @if (ErrorMessage != null)
                                {
                                    <p>@ErrorMessage</p>
                                }
                                <EditForm Model="@mr">
                                    <select class="form-control" @bind="SelectedLecturer.Id">
                                        @foreach (var lecturer in Lecturers)
                                        {
                                            <option value="@lecturer.Id">
                                                @lecturer.SetToken()
                                            </option>
                                        }
                                    </select>
                                </EditForm>

                            </MatDialogContent>
                            <MatDialogActions>
                                <MatButton OnClick="@(e=>addLecturer(choosedModuleRun.ModuleRunId,SelectedLecturer.Id))">Add</MatButton>
                                <MatButton OnClick="CloseDialog">Close</MatButton>
                            </MatDialogActions>
                        </MatDialog>


                        <MatDialog @bind-IsOpen="dialogIsOpenLecturerGroup">
                            <MatDialogTitle>Add Group of Professors</MatDialogTitle>
                            <MatDialogContent Style="width: 400px; height: 200px; right: 50px">
                                <h3>@choosedModuleRun.ModuleRunId </h3>
                               
                                @if (ErrorMessage != null)
                                {
                                    <p>@ErrorMessage</p>
                                }
                                <EditForm Model="@mr">
                                    <select class="form-control" @bind="SelectedLecturerGroup.LecturerGroupId">
                                        @foreach (var lecturerGroup in LecturerGroups)
                                        {
                                            <option value="@lecturerGroup.LecturerGroupId">
                                                @lecturerGroup.Title
                                            </option>
                                        }
                                    </select>
                                </EditForm>

                            </MatDialogContent>
                            <MatDialogActions>
                                <MatButton OnClick="@(e=>addLecturerGroup(choosedModuleRun.ModuleRunId,SelectedLecturerGroup.LecturerGroupId))">Add</MatButton>
                                <MatButton OnClick="CloseDialog">Close</MatButton>
                            </MatDialogActions>
                        </MatDialog>
                    }
                }
            }
        </tbody>
    </table>
}

@*dialog for last year plan *@



@*Dialog for making a new module*@
<EditForm Model="@moduleRun" OnInvalidSubmit="@okClickM">
    <MatDialog @bind-IsOpen="dialogIsOpenMNew">
        <MatDialogTitle>
            Add Module

        </MatDialogTitle>
        <MatDialogContent Style="width: 500px;right:50px">
            
            @if (ErrorMessage != null)
            {
                <p>@ErrorMessage</p>
            }

            <div class="form-group row">
                <label for="semester">Semester</label>
            </div>
            <div class="col-sm-10">
                <InputSelect id="semester" @bind-Value="@moduleRun.SemesterId" class="form-control">
                    @foreach (var sem in Semesters)
                    {
                        <option value="@sem.SemesterId">@sem.GetAbbreviation()</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group row">
                <label for="semester">Module Title</label>
            </div>
            <div class="col-sm-10">
                <InputSelect id="module" @bind-Value="@moduleRun.ModuleId" class="form-control">
                    @foreach (var module in Modules)
                    {
                        <option value="@module.ModuleId">@module.ModuleId | @module.Title</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group row">
                <label for="Place" class="col-sm-2 col-form-label">

                </label>
                <div class="col-sm-10">
                    <InputText id="Place" class="form-control" placeholder="Place"
                               @bind-Value="@moduleRun.Place" />
                </div>
            </div>
            <div class="form-group row">
                <label for="Place" class="col-sm-2 col-form-label">

                </label>
                <div class="col-sm-10">
                    <InputText id="Place" class="form-control" placeholder="Code"
                               @bind-Value="@moduleRun.Code" />
                </div>
            </div>

            <div>
                Active<br />
                <MatCheckbox @bind-Value="@moduleRun.Editable" Label="@(ChangeLabel(ModuleRun.Editable))"></MatCheckbox>
            </div>
        </MatDialogContent>
        <MatButton type="submit" name="HandleValidSubmit" @onclick="@(e=>addModuleRun())">OK</MatButton>
        <MatButton Type="cancel" Name="Cancel" @onclick="@(e=>CloseDialog())">X</MatButton>


    </MatDialog>
</EditForm>


@*dialog for moduleRun*@



@code {

    #region variables
    string request { get; set; } = "R";
    bool loadFailed;
    #endregion



    private async Task CallJSMethod()
    {

        //await JS.InvokeVoidAsync("CollapseTableRow");
        await js.InvokeVoidAsync("GetName");

    }
    private async Task CallJSMethod2()
    {

        await js.InvokeVoidAsync("SetButtonsVisible");
    }

    #region Last Year Plan


    #endregion
    #region Dialog Box Methods for Last Year Plan
    bool _isDelete = false;
    bool dialogIsOpen = false;
    bool _isEdit = false;


    private void OpenDialog(bool isEdit)
    {

        //if (!_isEdit) plan = new Plan();
        dialogIsOpen = true;
    }
    private void okCklick()
    {
        dialogIsOpen = false;
        dialogIsOpenP = false;

    }
    private void CloseDialog()
    {
        dialogIsOpen = false;
        LdialogIsOpen = false;
        dialogIsOpenM = false;
        dialogIsOpenMNew = false;
        dialogIsOpenP = false;
        dialogIsOpenLecturerGroup = false;

    }
    #endregion

    #region dialog for lecturers

    bool LdialogIsOpen = false;
    bool _isEditL = false;
    LecturerModuleRunDto newLmr = new LecturerModuleRunDto();
    ModuleRunDto SelectedMR { get; set; }
    public int ModuleRunId;
    private string ErrorMessage { get; set; }

    public ModuleRunDto choosedModuleRun = new ModuleRunDto();
    [Parameter]
    public int moduleRunIdChoosed { get; set; }

    private async Task OpenLecturerDialog(bool isEditL, int choosedModuleRunId)
    {
        moduleRunIdChoosed = choosedModuleRunId;
        choosedModuleRun = await moduleRunService.GetModuleRun(moduleRunIdChoosed);
        _isEditL = isEditL;
        LdialogIsOpen = true;
    }

    private void okClickL()
    {
        LdialogIsOpen = false;
    }

    private void LCloseDialog()
    {
        LdialogIsOpen = false;
    }
    /// <summary>
    /// method to remove moduleRun from plan
    /// </summary>
    private async Task RemoveModuleRun(int choosedModuleRunId)
    {
        bool isConfirm = await js.InvokeAsync<bool>("confirm", "do you want to delete selected module run from this plan");

        moduleRunIdChoosed = choosedModuleRunId;
        if (isConfirm)
        {
            await ModuleRunService.SoftDeleteModuleRun(moduleRunIdChoosed);
            await OnInitializedAsync();
            //NavManager.NavigateTo($"/editplan/{SelectedPlanId}", true);
        }

    }





    async Task addLecturer(int moduleRunId, int lecturerId)
    {
        try
        {
            LecturerModuleRunDto lecturerModuleRun = new LecturerModuleRunDto()
            {
                LecturerId = lecturerId,
                ModuleRunId = moduleRunId
            };

            var result = await LecturerModuleRunService.CreateLecturerModuleRun(lecturerModuleRun);
            if (result.ErrorMessage != null)
            {
                ErrorMessage = result.ErrorMessage;
            }
            else
            {
                LdialogIsOpen = false;
                await OnInitializedAsync();
            }
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Logger.LogWarning(ex, "The selected Lecturer is already addet to this module");
        }
    }


    public bool showHours = true;

    void ShowSetHours() {
        showHours = !showHours;
    }
    #endregion


    #region moduleRun

    string labelName1 = "setEditable";
    string labelName2 = "Disable";


    string ChangeLabel(bool val)
    {
        return !val ? labelName1 : labelName2;
    }

    [Inject]
    public IModuleRunService moduleRunService { get; set; }

    ModuleRunDto moduleRun = new ModuleRunDto();
    ModuleRunDto SelectedModuleRun { get; set; } = new ModuleRunDto();
    bool dialogIsOpenM = false;
    bool dialogIsOpenMNew = false;
    bool _isEditM = false;

    bool snackBarM = false;

    #region Methods



    private void DeleteModuleRun()
    {

        snackBarM = true;
    }
    #endregion

    #region Dialog Box Methods
    private async Task OpenDialogM(bool isEditM, int choosedModuleRunId)
    {
        moduleRunIdChoosed = choosedModuleRunId;
        choosedModuleRun = await moduleRunService.GetModuleRun(moduleRunIdChoosed);



        _isEditM = isEditM;
        dialogIsOpenM = true;
    }
    private void OpenDialogMNew(bool isEditM)
    {
        _isEditM = isEditM;
        dialogIsOpenMNew = true;
    }
    private async void okClickM()
    {
        dialogIsOpenM = false;
        dialogIsOpenMNew = false;
        //if (moduleRun.ModuleRunId != 0)
        //{
        //    await ModuleRunService.UpdateModuleRun(moduleRun);
        //}
        //else {
        //    moduleRun = await ModuleRunService.CreateModuleRun(moduleRun);
        //}

        await ModuleRunService.UpdateModuleRun(choosedModuleRun);

    }
    async Task addModuleRun()
    {
        try
        {
            var result = await ModuleRunService.CreateModuleRun(moduleRun);
            if (result.ErrorMessage != null)
            {
                ErrorMessage = result.ErrorMessage;
            }
            else
            {
                // CloseDialogM();
                dialogIsOpenMNew = false;
                await OnInitializedAsync();
            }
        }
        catch (Exception ex)
        {

            loadFailed = true;
            Logger.LogWarning(ex, "Don't duplicate the module run!");
        }
    }


    private void CloseDialogM()
    {
        dialogIsOpenM = false;
        dialogIsOpenMNew = false;
        dialogIsOpenMNew = false;

    }

    #endregion
    #region Additional Assigmment


    #endregion
    #endregion

    #region plan
    public async Task DeletePlan()
    {
        bool isConfirm = await js.InvokeAsync<bool>("confirm", "do you want to delete this plan?");


        if (isConfirm)
        {
            await PlanService.DeletePlan(Plan.Id);

            NavManager.NavigateTo($"/home", true);
        }
    }

    /// <summary>
    /// set plan modifyable
    /// </summary>
    string labelName3 = "setEditable";
    string labelName4 = "Disable";
    bool editable = false;
    async Task SetEditablePlan()
    {

        if (!editable)
        {
            ChangeLabelPlan(editable);
            Plan.IsModifyable = true;

            await PlanService.UpdatePlan(Plan);
            editable = true;
            ChangeLabelPlan(editable);
        }
        else
        {
            ChangeLabelPlan(editable);
            Plan.IsModifyable = false;
            editable = false;

        }
    }

    string ChangeLabelPlan(bool val)
    {
        return !val ? labelName3 : labelName4;
        if (!editable)
        {
            Plan.IsModifyable = true;
        }
        Plan.IsModifyable = false;
    }
    #endregion
    #region dialog plan
    bool dialogIsOpenP = false;

    private void OpenDialogP(bool isEdit)
    {

        //if (!_isEdit) plan = new Plan();
        dialogIsOpenP = true;
    }

    async Task okClickP(PlanDto plan) {
        await PlanService.UpdatePlan(plan);
        CloseDialog();
    }

    #endregion

    #region lecturers group
    [Inject]
    public IModuleRunLecturerGroupService moduleRunLecturerGroupService { get; set; }

    public async Task DeleteModuleRunLecturerGroup(ModuleRunLecturerGroupDto mrlg)
    {
        bool isConfirm = await js.InvokeAsync<bool>("confirm", "do you want to delete selected group of lecturers from this module?");


        if (isConfirm)
        {
            await moduleRunLecturerGroupService.DeleteModuleRunLecturerGroup(mrlg.ModuleRunId,mrlg.LecturerGroupId);
            await OnInitializedAsync();
            //NavManager.NavigateTo($"/editplan/{SelectedPlanId}", true);
        }
    }


    bool dialogIsOpenLecturerGroup = false;

    private async Task OpenDialogLecturerGroup(bool isEditL, int choosedModuleRunId)
    {
        moduleRunIdChoosed = choosedModuleRunId;
        choosedModuleRun = await moduleRunService.GetModuleRun(moduleRunIdChoosed);
        _isEditL = isEditL;
        dialogIsOpenLecturerGroup = true;
    }

    public LecturerGroupDto SelectedLecturerGroup { get; set; } = new LecturerGroupDto();

    async Task addLecturerGroup(int moduleRunId, int lecturerGroupId)
    {
        try
        {
            ModuleRunLecturerGroupDto moduleRunLecturerGroupDto = new ModuleRunLecturerGroupDto()
            {
                LecturerGroupId = lecturerGroupId,
                ModuleRunId = moduleRunId
            };

            var result = await moduleRunLecturerGroupService.CreateModuleRunLecturerGroup(moduleRunLecturerGroupDto);
            if (result.ErrorMessage != null)
            {
                ErrorMessage = result.ErrorMessage;
            }
            else
            {
                LdialogIsOpen = false;
                await OnInitializedAsync();
            }
            dialogIsOpenLecturerGroup = false;
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Logger.LogWarning(ex, "The selected Lecturer is already addet to this module");
        }
    }
    #endregion
    bool showDates = false;
    void ShowDates() {
        showDates = !showDates;
    }
}

<style>
    .mdc-text-field__ripple MatTextField {
        width: 24px;
    }
</style>
