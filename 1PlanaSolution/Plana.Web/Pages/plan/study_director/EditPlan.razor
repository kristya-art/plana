@page "/editplan/{id}"
@page "/editplan"
@using MatBlazor;
@*@using Plana.Models;*@
@using Plana.Shared;
@using Plana.Web.Pages.plan.study_director;

@inject IJSRuntime js

@inherits EditPlanBase
@if (Plan == null || Plans == null) { return; }


<Plana.Web.Pages.template_components.CustomSelect/>

    <div class="btn-group">
        <button id="addNewModule" @onclick="@(e=>OpenDialogMNew(false))" style="float: right;">Add Module</button>
        <button @onclick="@(e=>OpenDialog(false))" style="float: right;">last year plan</button>
    </div>

    <div class="btn-groupR">
        <button>Share with professors on @Plan.PublishDateForProfessors </button>
        <button>Official publish on @Plan.OfficialPublishDate</button>

    </div>

@*Modules Table*@

@if (Plan == null)
{
    <text>Loading...</text>
}
else
{
   <table class="table">
        <thead>
            <tr>
                <th width="10%">Semeter Id</th>
                <th>Semester</th>
                <th>Module</th>
                <th>Module Title</th>
                <th>Module-Group</th>
                <th>Place</th>
                <th>Module Total Hours</th>
                <th>Lecturers Group</th>
                <th>Lecturers</th>
                <th>Set Lecturers hours</th>
                <th>Desired hours</th>
                <th>Actions</th>
                <th>notes</th>
            </tr>
     </thead>
        <tbody>

            @if (Semesters != null)
            {
                @foreach (var sem in Semesters)
                {

                    @*fix it , the problem is that when the sem == null, program is break up*@
                    @*@if (sem.ModuleRuns == null) { return; }*@
                    @if (sem.ModuleRuns == null) { return; }

                    @foreach (var mr in sem.ModuleRuns)
                    {
            <tr>
                <td><input Id="mr" @bind="mr.ModuleRunId" /></td>
                <td>@sem.GetAbbreviation()</td>

                <td contenteditable='true'>@mr.Module.Code</td>
                <td>@mr.Module.Title</td>
                <td>@mr.ModuleGroup</td>
                <td contenteditable="true">@mr.Place</td>
                <td contenteditable="true">@mr.Module.TotalHours</td>
                <td>

                    @if (mr.ModuleRunLecturerGroups != null)
                    {

                        @foreach (var lg in mr.ModuleRunLecturerGroups)
                        {
                            <p style="white-space:nowrap;">
                                @lg.LecturerGroup.Title
                                <button class="btn" id="del"><i class="fa fa-close"></i></button>
                            </p>
                        }
                    }
                    <button class="btn" id="add"><i class="fa fa-plus"></i></button>
                    @*<button class="btn" id="add" @onclick="@(e => OpenLecturerGDialog(false))"><i class="fa fa-plus"></i></button>*@
                </td>

                @if (mr.LecturersMR != null)
                {
                    <td style="white-space:nowrap;">
                        <div id="scroll">
                            @foreach (var lm in mr.LecturersMR)
                            {

                                <p style="white-space:nowrap;">
                                    @lm.Lecturer.SetToken() | @lm.Hours
                                    <button class="btn" id="del" @onclick="@(e => LecturerModuleRunService.DeleteLecturerModuleRun(lm.ModuleRunId, lm.LecturerId))"><i class="fa fa-close"></i></button>
                                </p>


                            }

                            <button class="btn" id="add" @onclick="@(e => OpenLecturerDialog(false))"><i class="fa fa-plus"></i></button>

                        </div>
                    </td>
                    <td contenteditable='true'>
                        @foreach (var lm in mr.LecturersMR)
                        {
                            <MatTextField @bind-Value="lm.Hours" style=" height: 20px;"></MatTextField>
                            <MatButton type="submit" name="HandleValidSubmit" @onclick="@(e => LecturerModuleRunService.UpdateLecturerModuleRun(lm))">OK</MatButton>
                        }
                    </td>
                    <td>
                        @foreach (var lm in mr.LecturersMR)
                        {
                            <p style="color:lightcoral;"> @lm.DesiredHours.</p>

                        }

                        @if (mr.IsExceedingHours())
                        {
                            @*<div class="w3-panel w3-pale-red w3-border" >
                     <h3>Attention!</h3>
                     <p>The number of desired hours exceeds the norm</p>
                    </div>*@
                            <i class="material-icons" style="font-size:24px">warning</i>
                        }
                    </td>

                }
            <td style="white-space:nowrap;" @onclick="CallJSMethod2">
                <button class="btn" id="edit-btn">edit</button>
                <button class="btn" id="delete-btn" @onclick="@(e=>ModuleRunService.SoftDeleteModuleRun(mr.ModuleRunId))">delete</button>
                <button class="btn" id="cancel-btn">cancel</button>
                <MatButton Raised="true" @onclick="@(e => OpenDialogM(true))" Icon="edit" title="Edit ModuleRun"></MatButton>

                @*dialog to update Module Run*@
                <MatDialog @bind-IsOpen="dialogIsOpenM" @bind-Value="mr.ModuleRunId">
                    <MatDialogTitle>Add / Edit Module</MatDialogTitle>
                    <MatDialogContent>
                        <MatTextField Label="Module Title" @bind-Value="@mr.Module.Title"></MatTextField>
                        <MatTextField Label="Place" @bind-Value="@mr.Place"></MatTextField>
                    </MatDialogContent>
                    <MatDialogActions>
                        <MatButton OnClick="okClickM">Add</MatButton>
                        <MatButton OnClick="CloseDialogM">Close</MatButton>

                    </MatDialogActions>
                </MatDialog>
            </td>
                <td><textarea>...</textarea></td>

            </tr>

                        /** dialog for lecturers*/

                        //foreach (ModuleRunDto mrdt in sem.ModuleRuns) {

                        //  var t= mrdt.Module.Title;
                        //}

                        for (var i = 0; i < sem.ModuleRuns.ToList().Count; i++)
                        {
                            SelectedModuleRun = sem.ModuleRuns.ToList()[i];
                            //SelectedModuleRun = new ModuleRunDto();
                            //SelectedModuleRun = e;
                            int selctedId = SelectedModuleRun.ModuleRunId;
                        }
        <MatDialog @bind-IsOpen="LdialogIsOpen">
            <MatDialogTitle>Add Professor</MatDialogTitle>
            <MatDialogContent Style="width: 200px; height: 200px; right: 50px">
                @*<form>*@
                <EditForm Model="@SelectedModuleRun">
                    <InputText id="title" Style="width:150px" @bind-Value="@SelectedModuleRun.Module.Title"></InputText>
                    <select class="form-control" @bind="SelectedLecturer.Id">

                        @foreach (var lecturer in Lecturers)
                        {
                            <option value="@lecturer.Id">
                                @lecturer.SetToken()
                            </option>
                        }
                    </select>
                    <div class="btn-group">
                        @*<button @onclick="@(e=>addLecturer(SelectedModuleRun.ModuleRunId,SelectedLecturer.Id))"> Add Professor</button>*@
                        <button @onclick="@(e => addLecturer(SelectedModuleRun.ModuleRunId,SelectedLecturer.Id))"> Add New Professor</button>

                    </div>
                </EditForm>
                @*</form>*@
            </MatDialogContent>
            <MatDialogActions>
                <MatButton OnClick="okClickL">Add</MatButton>
                <MatButton OnClick="CloseDialog">Close</MatButton>
            </MatDialogActions>
        </MatDialog>

                      
                    }

                    }

            }
        </tbody>
    </table>
}

@*dialog for last year plan *@
<MatDialog @bind-IsOpen="dialogIsOpen">
    <MatDialogTitle>Add Plan</MatDialogTitle>
    <MatDialogContent Style="width: 750px;right:50px">
        @if (Plan == null)
        {
            <text>Loading...</text>
        }
        else
        {
           <table class="table">
                <thead>
                    <tr>
                        <th>Semester</th>
                        <th>Module</th>
                        <th>Module Title</th>
                        <th>Module-Group</th>
                        <th>Place</th>
                        <th>Module Total Hours</th>
                        <th>Lecturers Group</th>
                        <th>Lecturers</th>
                        <th>Set Lecturers hours</th>
                        <th>Actions</th>
                        <th>notes</th>
                    </tr>
                </thead>
                <tbody>

                    @if (Semesters != null)
                    {
                           @foreach (var sem in Semesters)
                        {

                            @*flix it , the problem is that when the sem == null, program is break up*@
                         
                            @if (sem.ModuleRuns == null) { return; }
                            @foreach (var mr in sem.ModuleRuns)
                            {
                                <tr>
                                    <td>
                                        <button contenteditable="true">
                                            @mr.Module.Title
                                        </button>

                                    </td>
                                </tr>

                                <tr>
                                    <td>@sem.GetAbbreviation()</td>

                                    <td contenteditable='true'>@mr.Module.Code</td>
                                    <td>@mr.Module.Title</td>
                                    <td>@mr.ModuleGroup</td>
                                    <td contenteditable="true">@mr.Place</td>
                                    <td contenteditable="true">@mr.Module.TotalHours</td>
                                    <td>

                                        @if (mr.ModuleRunLecturerGroups != null)
                                        {

                                            @foreach (var lg in mr.ModuleRunLecturerGroups)
                                            {
                                                <p style="white-space:nowrap;">
                                                    @lg.LecturerGroup.Title
                                                    <button class="btn" id="del"><i class="fa fa-close"></i></button>
                                                </p>
                                            }
                                        }
                                        <button class="btn" id="add"><i class="fa fa-plus"></i></button>
                                    </td>

                                    @if (mr.LecturersMR != null)
                                    {

                                        <td style="white-space:nowrap;">

                                            <div id="scroll">
                                                @foreach (var lm in mr.LecturersMR)
                                                {
                                                    <p style="white-space:nowrap;">
                                                        @lm.Lecturer.SetToken() | @lm.Hours
                                                        <button class="btn" disabled id="del"><i class="fa fa-close"></i></button>
                                                    </p>

                                                }

                                            </div>

                                        </td>
                                        <td contenteditable='true'>
                                            @foreach (var lm in mr.LecturersMR)
                                            {

                                                <p contenteditable='true'> @lm.Hours</p>

                                            }
                                        </td>
                                    }
                                    <td style="white-space:nowrap;" @onclick="CallJSMethod2">
                                        <button class="btn" id="edit-btn">edit</button>
                                        <button class="btn" id="save-btn">save lecturerModuleRun</button>
                                        <button class="btn" id="save-btn">save</button>
                                        <button class="btn" id="delete-btn">delete module</button>
                                        <button class="btn" id="cancel-btn">cancel</button>
                                        <MatButton Raised="true" @onclick="HandleValidSubmit" Icon="save" title="Save"></MatButton>

                                    </td>
                                    <td><textarea>...</textarea></td>
                                </tr>
                              }
                        }

                }
                 </tbody>
            </table>
 }

    </MatDialogContent>
    <button type="submit" class="btn-btn-success">
        Copy to actual
    </button>
</MatDialog>


@*Dialog for making a new module*@
<EditForm Model="@moduleRun" OnInvalidSubmit="@okClickM">
    <MatDialog @bind-IsOpen="dialogIsOpenMNew">
        <MatDialogTitle>Add Module</MatDialogTitle>
        <MatDialogContent Style="width: 500px;right:50px">
            <div class="form-group row">
                <label for="semester">Semester</label>
            </div>
            <div class="col-sm-10">
                <InputSelect id="semester" @bind-Value="@moduleRun.SemesterId" class="form-control">
                    @foreach (var sem in Semesters)
                    {
                        <option value="@sem.SemesterId">@sem.GetAbbreviation()</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group row">
                <label for="semester">Module Title</label>
            </div>
            <div class="col-sm-10">
                <InputSelect id="module" @bind-Value="@moduleRun.ModuleId" class="form-control">
                    @foreach (var module in Modules)
                    {
                        <option value="@module.ModuleId">@module.ModuleId | @module.Title</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group row">
                <label for="Place" class="col-sm-2 col-form-label">
                    
                </label>
                <div class="col-sm-10">
                    <InputText id="Place" class="form-control" placeholder="Place"
                               @bind-Value="@moduleRun.Place" />
                </div>
            </div>
            <div>
                Active<br />
                <MatCheckbox @bind-Value="@moduleRun.Editable" Label="@(ChangeLabel(ModuleRun.Editable))"></MatCheckbox>
            </div>
        </MatDialogContent>
        <MatButton type="submit" name="HandleValidSubmit" @onclick="@(e=>addModuleRun())">OK</MatButton>
        <MatButton Type="cancel" Name="Cancel" @onclick="@(e=>CloseDialog())">X</MatButton>

       
    </MatDialog>
</EditForm>


@*dialog for moduleRun*@



@code {

    #region variables


    #endregion


    /// <summary>
    /// js code for button
    ///
    ///  </summary>

    protected override async void OnAfterRender(bool firstRender)
    {
        await js.InvokeVoidAsync("renderjQueryComponents");
        base.OnAfterRender(firstRender);
        await js.InvokeVoidAsync("SetButtonsVisible");

    }

    private async Task CallJSMethod()
    {

        //await JS.InvokeVoidAsync("CollapseTableRow");
        await js.InvokeVoidAsync("GetName");

    }
    private async Task CallJSMethod2()
    {
        await js.InvokeVoidAsync("SetButtonsVisible");
    }

    #region Last Year Plan

    #endregion
    #region Dialog Box Methods for Last Year Plan
    bool _isDelete = false;
    bool dialogIsOpen = false;
    bool _isEdit = false;
    private void OpenDialog(bool isEdit)
    {

        //if (!_isEdit) plan = new Plan();
        dialogIsOpen = true;
    }
    private void okCklick()
    {
        dialogIsOpen = false;

    }
    private void CloseDialog()
    {
        dialogIsOpen = false;
        LdialogIsOpen = false;
        dialogIsOpenM = false;
        dialogIsOpenMNew = false;

    }
    #endregion

    #region dialog for lecturers

    bool LdialogIsOpen = false;
    bool _isEditL = false;
    LecturerModuleRunDto newLmr = new LecturerModuleRunDto();
    ModuleRunDto SelectedMR { get; set; }
    public int ModuleRunId;



    private void OpenLecturerDialog(bool isEditL )
    {
       
        _isEditL = isEditL;
        LdialogIsOpen = true;
    }
    private void okClickL()
    {
        //lmr.ModuleRunId = SelectedMR.Id;
        //lmr.LecturerId = SelectedLecturer.Id;

        //LecturerModuleRunService.CreateLecturerModuleRun(newLmr);
        LdialogIsOpen = false;
        // LecturerService.Add(selectedLecturer);
        // lecturerModuleRunService.update(LM);
    }
    private void LCloseDialog()
    {
        LdialogIsOpen = false;


    }

    async Task addLecturer(int moduleRunId, int lecturerId) {
        LecturerModuleRunDto lecturerModuleRun = new LecturerModuleRunDto()
        {
            LecturerId = lecturerId,
            ModuleRunId = moduleRunId
        };
        lecturerModuleRun =  await LecturerModuleRunService.CreateLecturerModuleRun(lecturerModuleRun);

        LdialogIsOpen = false;
    }
    #endregion

    #region moduleRun

    string labelName1 = "setEditable";
    string labelName2 = "Disable";


    string ChangeLabel(bool val)
    {
        return !val ? labelName1 : labelName2;
    }

    [Inject]
    public IModuleRunService moduleRunService { get; set; }

    ModuleRunDto moduleRun = new ModuleRunDto();
    ModuleRunDto SelectedModuleRun { get; set; } = new ModuleRunDto();
    bool dialogIsOpenM = false;
    bool dialogIsOpenMNew = false;
    bool _isEditM = false;

    bool snackBarM = false;

    #region Methods



    private void DeleteModuleRun()
    {

        snackBarM = true;
    }
    #endregion

    #region Dialog Box Methods
    private void OpenDialogM(bool isEditM)
    {
        _isEditM = isEditM;
        dialogIsOpenM = true;
    }
    private void OpenDialogMNew(bool isEditM)
    {
        _isEditM = isEditM;
        dialogIsOpenMNew = true;
    }
    private async void okClickM()
    {
        dialogIsOpenM = false;
        dialogIsOpenMNew = false;
        //if (moduleRun.ModuleRunId != 0)
        //{
        //    await ModuleRunService.UpdateModuleRun(moduleRun);
        //}
        //else {
        //    moduleRun = await ModuleRunService.CreateModuleRun(moduleRun);
        //}

        await ModuleRunService.UpdateModuleRun(moduleRun);

    }
    async Task addModuleRun()
    {
        await ModuleRunService.CreateModuleRun(moduleRun);
        CloseDialogM();
    }
    private void CloseDialogM()
    {
        dialogIsOpenM = false;
        dialogIsOpenMNew = false;
        dialogIsOpenMNew = false;

    }




    #endregion


    #endregion
}

        <style>
            /*.table {
                font-family: 'ArialMT', 'Arial';
                font-weight: 400;
                font-style: normal;
                font-size: 13px;
                letter-spacing: normal;
                color: #333333;
                vertical-align: none;
                text-align: center;
                line-height: normal;
                text-transform: none;
            }

                .table th {*/
                    /*padding: 2px;*/
                    /*text-align: left;
                }

                .table tr {
                }

                .table td {
                    text-align: center;
                }

                .table tr:hover {
                    background-color: #d1cfcf;
                }


            .btn {
                background-color: white;
                border: none;
                padding: 3px 4px;
                font-size: 9px;
                cursor: pointer;
            }

            #del {
                color: #d24141;
            }

            #add {
                color: #1919aa
            }

            #delete-btn, #save-btn, #cancel-btn {
                display: none;
            }*/
            /* Darker background on mouse-over */
            /*.btn:hover {
                background-color: #b2acb2;
            }

            #scroll td {
                width: 500px;
                height: 300px;
                overflow: auto;
            }*/

            .mdc-text-field__ripple MatTextField {
                width:24px;
            }
        </style>
