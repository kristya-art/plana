@page "/myplanL/{Id}/{Id2}"
@*@page "/myPlanL/{id}"*@
@page "/myplanL"
@using Plana.Shared
@inject IJSRuntime js
@using MatBlazor;

@*section for plan selection*@
@if (Plans == null)
{ return; }
<div class="selectYear">
    <form>

        <select class="form-control" @bind="SelectedPlan.Id">
            
            @foreach (var plan in Plans)
            {

                <option value="@plan.Id">
                    @plan.Year
                </option>

            }
        </select>
        <div class="btn-group">
            <button @onclick="NavigateToMyPlan">
                My Plan
            </button>
        </div>
    </form>
</div>

<div class="new">
    <p>@Lecturer.FirstName</p>
    <p>@Plan.Year</p>
</div>

@*<Plana.Web.Pages.plan.navMenus.LCustomSelect />*@

<div class="btn-group" style="font-size: 13px">
    <button style="float: right;" @onclick="@(e=>OpenDialogMR(true))">add module</button>
    <button style="float: right;">add additional assignment</button>
    <button style="float: right;">show lecturer groups</button>
    <button style="float:left">show last year plan</button>
    <button class="btn-groupR" style="border-color:navajowhite">submit until</button>
</div>
<div class="btn-groupR" style="border-color:palevioletred">submit plan</div>

@if (Plan == null)
{
    <text>Loading...</text>
}
else
{

    @*<table class="table" itemscope="@Plan" itemid="@Plan.Id">*@
    <div id="table_container">
        <div class="row">
            <div class="column">
                <table class="table">
                    <thead>
                        <tr>


                            <th width="2%">Semester</th>
                            <th>Module</th>
                            <th>Module Title</th>
                            <th>Group</th>
                            <th>Place</th>
                            <th>Module Total Hours</th>
                            <th>My hours</th>
                            <th>Set desired hours</th>
                            <th>Actions</th>
                            <th width="20%">notes</th>
                            <th>lecturer group</th>
                        </tr>

                    </thead>

                    <tbody>
                    @if (MyModuleRuns != null) {

                      @foreach (var mr in MyModuleRuns)
                      {
                         <tr>
                             <td>@mr.SemesterId</td>
                             <td>@mr.Module.Code</td>
                             <td>@mr.Module.Title</td>
                             <td>@mr.Code</td>
                             <td>@mr.Place</td>
                             <td>@mr.Module.TotalHours</td>
                             @*@if (mr.LecturersMR.Contains(Lecturer)) { }*@
                              @foreach (var lmr in mr.LecturersMR)
                              {
                                 @if(lmr.Lecturer.Id == Lecturer.Id) { 
                                   <td><p>@lmr.Hours</p></td>
                                   <td>
                                       @*<MatTextField @bind-Value="lmr.Hours"></MatTextField>*@
                                       <p><MatTextField @bind-Value="lmr.DesiredHours"></MatTextField></p>
                                       <MatButton type="submit" name="HandleValidSubmit" @onclick="@(e=>LecturerModuleRunService.UpdateLecturerModuleRun(lmr))">OK</MatButton>
                                   </td>
                                 }
                              }
                             <td>

                             </td>
                             <td></td>
                             <td></td>
                             @foreach (var mrlg in mr.ModuleRunLecturerGroups)
                             {
                             <td>@mrlg.LecturerGroup.Title</td>
                             }

                         </tr>
                      }

                    }
                    </tbody>
                </table>
            </div>
            <div class="columnMiddle"></div>
            <div class="column">

                <table class="table">
                    <thead>
                        <tr>
                            <th>Total</th>
                        </tr>
                        <tr>

                            <th width="20%">HS</th>
                            <th width="20%">FS</th>
                            <th width="20%">AA</th>
                            <th width="20%">YEAR</th>

                        </tr>

                    </thead>
                    <tbody>
                        <tr>
                            <td>@PlanLecturer.GetHStotal()</td>
                            <td>@PlanLecturer.GetFStotal()</td>
                            <td>@PlanLecturer.GetAA()</td>
                            <td>@PlanLecturer.GetTotal()</td>

                        </tr>
                        <tr><td></td><td></td></tr>
                        <tr>
                            <th width="40%">ANNUAL TARGET</th>
                            <td>@PlanLecturer.SetAnnualTarget()</td>
                        </tr>
                        <tr>
                            <th width="40%">BALANCE ACTUAL</th>
                            <td>@PlanLecturer.GetBalanceActual()</td>
                        </tr>
                        <tr>
                            <th width="40%">BALANCE LAST YEAR</th>
                            <td>@PlanLecturer.BalanceLastYear</td>
                        </tr>
                        <tr>
                            <th width="40%">BALANCE ACCUMULATED</th>
                            <td>@PlanLecturer.GetBalanceAccumulated()</td>
                        </tr>

                    </tbody>
                  
                </table>
            </div>
        </div>
    </div>
}
@*dialog with Module Run list*@
<MatDialog @bind-IsOpen="dialogIsOpenMR">
    <MatDialogTitle>Add Plan</MatDialogTitle>
    <MatDialogContent Style="width: 1100px;right:50px">
        @if (Plan == null)
        {
            <text>Loading...</text>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Semester</th>
                        <th>Module</th>
                        <th>Module Title</th>
                        <th>Module-Group</th>
                        <th>Place</th>
                        <th>Module Total Hours</th>
                        <th>Add me</th>
                        <th>Add group</th>
                        <th>My hours</th>
                        <th>Actions</th>
                        
                    </tr>
                </thead>
                <tbody>

                    @if (Semesters != null)
                    {
                        @foreach (var sem in Semesters)
                        {

                            @*flix it , the problem is that when the sem == null, program is break up*@

                            @if (sem.ModuleRuns == null) { return; }
                            @foreach (var mr in sem.ModuleRuns)
                            {
                              
                                <tr>
                                    <td>@sem.GetAbbreviation()</td>

                                    <td contenteditable='true'>@mr.Module.Code</td>
                                    <td>@mr.Module.Title</td>
                                    <td>@mr.ModuleGroup</td>
                                    <td contenteditable="true">@mr.Place</td>
                                    <td contenteditable="true">@mr.Module.TotalHours</td>
                                    <td>

                                        @*@if (mr.ModuleRunLecturerGroups != null)
                                        {

                                            @foreach (var lg in mr.ModuleRunLecturerGroups)
                                            {
                                                <p style="white-space:nowrap;">
                                                    @lg.LecturerGroup.Title
                                                    <button class="btn" id="del"><i class="fa fa-close"></i></button>
                                                </p>
                                            }
                                        }*@
                                        <button class="btn" id="add"><i class="fa fa-plus"></i></button>
                                    </td>

                                    @*@if (mr.LecturersMR != null)
                                    {*@

                                        <td style="white-space:nowrap;">

                                            @*<div id="scroll">
                                                @foreach (var lm in mr.LecturersMR)
                                                {
                                                    <p style="white-space:nowrap;">
                                                        @lm.Lecturer.SetToken() | @lm.Hours
                                                        <button class="btn" disabled id="del"><i class="fa fa-close"></i></button>
                                                    </p>

                                                }

                                            </div>*@

                                        </td>
                                        <td contenteditable='true'>
                                            @*@foreach (var lm in mr.LecturersMR)
                                            {

                                                <p contenteditable='true'> @lm.Hours</p>

                                            }*@
                                        </td>
                                    }
                                    <td style="white-space:nowrap;">
                                        
                                        <button class="btn" id="save-btn">save</button>
                                         <button class="btn" id="cancel-btn">cancel</button>
                                        @*<MatButton Raised="true" @onclick="HandleValidSubmit" Icon="save" title="Save"></MatButton>*@

                                    </td>
                                    
                                </tr>
                            }
                        }

                    }
                </tbody>
            </table>
        }

    </MatDialogContent>
    <button type="submit" class="btn-btn-success">
        Save
    </button>
</MatDialog>

@code {


    [Inject]
    NavigationManager NavigationMan { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Id2 { get; set; }

    [Inject]
    public ISemesterService SemesterService { get; set; }

    [Inject]
    public IPlanLecturerService PlanLecturerService { get; set; }

    public PlanLecturerDto PlanLecturer { get; set; } = new PlanLecturerDto();

    [Inject]
    public IPlanService PlanService { get; set; }
    [Inject]
    public IModuleRunService ModuleRunService { get; set; }

    public PlanDto Plan { get; set; } = new PlanDto();
    public List<PlanDto> Plans { get; set; }
    [Inject]
    public ILecturerService LecturerService { get; set; }
    [Inject]
    public ILecturerModuleRunService LecturerModuleRunService {get;set;}

    public LecturerDto Lecturer { get; set; } = new LecturerDto();

    public ModuleRunDto ModuleRun { get; set; } = new ModuleRunDto();

    public List<ModuleRunDto> MyModuleRuns { get; set; } = new List<ModuleRunDto>();
    public List<ModuleRunDto> AllModuleRuns { get; set; } = new List<ModuleRunDto>();

    public SemesterDto Semester { get; set; } = new SemesterDto();

    public List<SemesterDto> Semesters { get; set; } = new List<SemesterDto>();

    public SemesterDto AutumnSemester { get; set; }
    public SemesterDto SpringSemester { get; set; }
    public string SemesterId { get; set; }
    int idsl { get; set; }
    protected async override Task OnInitializedAsync()
    {

        int.TryParse(Id, out int LecturerId);
        int.TryParse(Id2, out int PlanId);

        if (LecturerId != 0 && PlanId != 0) {

            PlanLecturer = await PlanLecturerService.GetPlanLecturer(int.Parse(Id), int.Parse(Id2));

            Lecturer = await LecturerService.GetLecturer(int.Parse(Id2));
            Plan = await PlanService.GetPlan(int.Parse(Id));
            Plans = (await PlanService.GetPlans()).ToList();
            MyModuleRuns = (await PlanLecturerService.GetModuleRunsForPlan(Plan.Id, Lecturer.Id)).ToList();

            AutumnSemester = Plan.AutumnSemester;
            SpringSemester = Plan.SpringSemester;
            Semesters = new List<SemesterDto> { AutumnSemester, SpringSemester };




            Semesters = new List<SemesterDto> { AutumnSemester, SpringSemester };
            //    LecturerModuleRun = await LecturerModuleRunService.GetLecturerModuleRun()




        }
        else { PlanLecturer = new PlanLecturerDto { }; }
        Semester = new SemesterDto { };
    }
    #region plan selection

    [Parameter]
    public PlanDto SelectedPlan { get; set; } = new PlanDto();






    public void NavigateToMyPlan()
    {
        //PlanLecturer = await PlanLecturerService.GetPlanLecturer(SelectedPlan.Id, Lecturer.Id);
        //if (PlanLecturer != null)
        //{

        string PlanId = Plan.Id.ToString();
        NavigationMan.NavigateTo($"/myplanL/{SelectedPlan.Id}/{Lecturer.Id}", true);

    }

    //await Alert();

    #endregion
    #region Dialog box for add moduleRun
    bool _isDelete = false;
    bool dialogIsOpenMR = false;
    bool _isEdit = false;
    private void OpenDialogMR(bool isEdit)
    {

        //if (!_isEdit) plan = new Plan();
        dialogIsOpenMR = true;
    }

    private void okClick() {
        dialogIsOpenMR = false;

    }

    private void CloseDialog()
    {
        dialogIsOpenMR = false;
    }
    #endregion



}
<style>
    /*   .row {
                    margin-left: -5px;
                    margin-right: -5px;
                }

                .column {
                    float: left;
                    width: 30%;
                    padding: 5px;
                }*/
    #table_container {
        width: 1200px;
        margin: 0 auto;
    }

    .row {
        margin-left: -5px;
        margin-right: -5px;
    }

    .column {
        float: left;
        width: 30%;
        padding: 5px;
    }

    .columnMiddle {
        float: left;
        width: 40%;
        padding: 5px;
    }

    /* Clearfix (clear floats) */
    .row::after {
        content: "";
        clear: both;
        display: table;
    }

    .table {
        border-collapse: collapse;
        border-spacing: 0;
        /* width: 400px;*/
        border: 1px solid #ddd;
    }

    .new {
        float: right;
        margin-top: -55px;
        position: sticky;
    }
</style>
