// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Plana.Web.Pages.plan.study_director
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Plana.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Plana.Web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Plana.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Plana.Web.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\Pages\plan\study_director\EditPlan.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\Pages\plan\study_director\EditPlan.razor"
using Plana.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\Pages\plan\study_director\EditPlan.razor"
using Plana.Web.Pages.plan.study_director;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\Pages\plan\study_director\EditPlan.razor"
using Microsoft.Extensions.Logging;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/editplan/{id}")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/editplan")]
    public partial class EditPlan : EditPlanBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 405 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\Pages\plan\study_director\EditPlan.razor"
       

    #region variables
    string request { get; set; } = "R";
    bool loadFailed;
    #endregion

    #region Last Year Plan


    #endregion
    #region Dialog Box Methods for Last Year Plan
    
    bool dialogIsOpen = false;
    bool _isEdit = false;


    private void OpenDialog(bool isEdit)
    {

        dialogIsOpen = true;
    }
    private void okCklick()
    {
        dialogIsOpen = false;
        dialogIsOpenP = false;

    }
    private void CloseDialog()
    {
        dialogIsOpen = false;
        LdialogIsOpen = false;
        dialogIsOpenM = false;
        dialogIsOpenMNew = false;
        dialogIsOpenP = false;
        dialogIsOpenLecturerGroup = false;

    }
    #endregion

    #region dialog for lecturers

    bool LdialogIsOpen = false;
    bool _isEditL = false;
    LecturerModuleRunDto newLmr = new LecturerModuleRunDto();
    ModuleRunDto SelectedMR { get; set; }
    public int ModuleRunId;
    private string ErrorMessage { get; set; }

    public ModuleRunDto choosedModuleRun = new ModuleRunDto();
    [Parameter]
    public int moduleRunIdChoosed { get; set; }

    private async Task OpenLecturerDialog(bool isEditL, int choosedModuleRunId)
    {
        moduleRunIdChoosed = choosedModuleRunId;
        choosedModuleRun = await moduleRunService.GetModuleRun(moduleRunIdChoosed);
        _isEditL = isEditL;
        LdialogIsOpen = true;
    }

    private void okClickL()
    {
        LdialogIsOpen = false;
    }

    private void LCloseDialog()
    {
        LdialogIsOpen = false;
    }
    /// <summary>
    /// method to remove moduleRun from plan
    /// </summary>
    private async Task RemoveModuleRun(int choosedModuleRunId)
    {
        bool isConfirm = await js.InvokeAsync<bool>("confirm", "do you want to delete selected module run from this plan");

        moduleRunIdChoosed = choosedModuleRunId;
        if (isConfirm)
        {
            await ModuleRunService.SoftDeleteModuleRun(moduleRunIdChoosed);
            await OnInitializedAsync();

        }

    }


    async Task addLecturer(int moduleRunId, int lecturerId)
    {
        try
        {
            LecturerModuleRunDto lecturerModuleRun = new LecturerModuleRunDto()
            {
                LecturerId = lecturerId,
                ModuleRunId = moduleRunId
            };

            var result = await LecturerModuleRunService.CreateLecturerModuleRun(lecturerModuleRun);
            if (result.ErrorMessage != null)
            {
                ErrorMessage = result.ErrorMessage;
            }
            else
            {
                LdialogIsOpen = false;
                await OnInitializedAsync();
            }
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Logger.LogWarning(ex, "The selected Lecturer is already addet to this module");
        }
    }


    public bool showHours = true;

    void ShowSetHours() {
        showHours = !showHours;
    }
    #endregion


    #region moduleRun

    string labelName1 = "setEditable";
    string labelName2 = "Disable";


    string ChangeLabel(bool val)
    {
        return !val ? labelName1 : labelName2;
    }

    [Inject]
    public IModuleRunService moduleRunService { get; set; }

    ModuleRunDto moduleRun = new ModuleRunDto();
    ModuleRunDto SelectedModuleRun { get; set; } = new ModuleRunDto();
    bool dialogIsOpenM = false;
    bool dialogIsOpenMNew = false;
    bool _isEditM = false;

    

    #region Methods



   
    #endregion

    #region Dialog Box Methods
    private async Task OpenDialogM(bool isEditM, int choosedModuleRunId)
    {
        moduleRunIdChoosed = choosedModuleRunId;
        choosedModuleRun = await moduleRunService.GetModuleRun(moduleRunIdChoosed);



        _isEditM = isEditM;
        dialogIsOpenM = true;
    }
    private void OpenDialogMNew(bool isEditM)
    {
        _isEditM = isEditM;
        dialogIsOpenMNew = true;
    }
    private async void okClickM()
    {
        dialogIsOpenM = false;
        dialogIsOpenMNew = false;
        await ModuleRunService.UpdateModuleRun(choosedModuleRun);

    }
    async Task addModuleRun()
    {
        try
        {
            var result = await ModuleRunService.CreateModuleRun(moduleRun);
            if (result.ErrorMessage != null)
            {
                ErrorMessage = result.ErrorMessage;
            }
            else
            {
                // CloseDialogM();
                dialogIsOpenMNew = false;
                await OnInitializedAsync();
            }
        }
        catch (Exception ex)
        {

            loadFailed = true;
            Logger.LogWarning(ex, "Don't duplicate the module run!");
        }
    }


    private void CloseDialogM()
    {
        dialogIsOpenM = false;
        dialogIsOpenMNew = false;
        dialogIsOpenMNew = false;

    }

    #endregion
    #region Additional Assigmment


    #endregion
    #endregion

    #region plan
    public async Task DeletePlan()
    {
        bool isConfirm = await js.InvokeAsync<bool>("confirm", "do you want to delete this plan?");


        if (isConfirm)
        {
            await PlanService.DeletePlan(Plan.Id);

            NavManager.NavigateTo($"/home", true);
        }
    }

    /// <summary>
    /// set plan modifyable
    /// </summary>
    string labelName3 = "setEditable";
    string labelName4 = "Disable";
    bool editable = false;
    async Task SetEditablePlan()
    {

        if (!editable)
        {
            ChangeLabelPlan(editable);
            Plan.IsModifyable = true;

            await PlanService.UpdatePlan(Plan);
            editable = true;
            ChangeLabelPlan(editable);
        }
        else
        {
            ChangeLabelPlan(editable);
            Plan.IsModifyable = false;
            editable = false;

        }
    }

    string ChangeLabelPlan(bool val)
    {
        return !val ? labelName3 : labelName4;
        if (!editable)
        {
            Plan.IsModifyable = true;
        }
        Plan.IsModifyable = false;
    }
    #endregion
    #region dialog plan
    bool dialogIsOpenP = false;

    private void OpenDialogP(bool isEdit)
    {

        //if (!_isEdit) plan = new Plan();
        dialogIsOpenP = true;
    }

    async Task okClickP(PlanDto plan) {
        await PlanService.UpdatePlan(plan);
        CloseDialog();
    }

    #endregion

    #region lecturers group
    [Inject]
    public IModuleRunLecturerGroupService moduleRunLecturerGroupService { get; set; }

    public async Task DeleteModuleRunLecturerGroup(ModuleRunLecturerGroupDto mrlg)
    {
        bool isConfirm = await js.InvokeAsync<bool>("confirm", "do you want to delete selected group of lecturers from this module?");


        if (isConfirm)
        {
            await moduleRunLecturerGroupService.DeleteModuleRunLecturerGroup(mrlg.ModuleRunId,mrlg.LecturerGroupId);
            await OnInitializedAsync();

        }
    }
    public async Task DeleteLecturer(LecturerModuleRunDto lmr)
    {
        bool isConfirm = await js.InvokeAsync<bool>("confirm", "do you want to delete selected lecturer from this module?");


        if (isConfirm)
        {
            await LecturerModuleRunService.DeleteLecturerModuleRun(lmr.ModuleRunId,lmr.LecturerId);
            await OnInitializedAsync();

        }
    }



    bool dialogIsOpenLecturerGroup = false;

    private async Task OpenDialogLecturerGroup(bool isEditL, int choosedModuleRunId)
    {
        moduleRunIdChoosed = choosedModuleRunId;
        choosedModuleRun = await moduleRunService.GetModuleRun(moduleRunIdChoosed);
        _isEditL = isEditL;
        dialogIsOpenLecturerGroup = true;
    }

    public LecturerGroupDto SelectedLecturerGroup { get; set; } = new LecturerGroupDto();

    async Task addLecturerGroup(int moduleRunId, int lecturerGroupId)
    {
        try
        {
            ModuleRunLecturerGroupDto moduleRunLecturerGroupDto = new ModuleRunLecturerGroupDto()
            {
                LecturerGroupId = lecturerGroupId,
                ModuleRunId = moduleRunId
            };

            var result = await moduleRunLecturerGroupService.CreateModuleRunLecturerGroup(moduleRunLecturerGroupDto);
            if (result.ErrorMessage != null)
            {
                ErrorMessage = result.ErrorMessage;
            }
            else
            {
                LdialogIsOpen = false;
                await OnInitializedAsync();
            }
            dialogIsOpenLecturerGroup = false;
        }
        catch (Exception ex)
        {
            loadFailed = true;
            Logger.LogWarning(ex, "The selected Lecturer is already addet to this module");
        }
    }
    #endregion
    bool showDates = false;
    void ShowDates() {
        showDates = !showDates;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogger<EditPlan> Logger { get; set; }
    }
}
#pragma warning restore 1591
