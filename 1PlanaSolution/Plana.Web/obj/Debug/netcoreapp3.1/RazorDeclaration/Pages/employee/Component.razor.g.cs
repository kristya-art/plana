// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Plana.Web.Pages.employee
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Plana.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Plana.Web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Plana.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Plana.Web.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\Pages\employee\Component.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/component")]
    public partial class Component : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 70 "C:\_gitlab\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\Pages\employee\Component.razor"
       



    Employee employee = new Employee();
    Employee selectedEmp = null;
    Employee tempEmp = null;
    int _index = -1;
    bool _isDelete = false;
    bool dialogIsOpen = false;
    bool _isEdit = false;
    bool snackBar = false;

    List<Employee> employees = new List<Employee>()
        {
            new Employee (1, "Marco","Male",Convert.ToDateTime("01-June-1995"),4),
           new Employee (2, "May","Female",Convert.ToDateTime("22-July-1996"),2),
            new Employee (3, "Coco","Male",Convert.ToDateTime("06-Jan-1990"),1),
            new Employee (4, "Ali","Male",Convert.ToDateTime("01-August-1975"),0),


    };


    public class Employee
    {
        public int EmployeeId { get; set; }
        public string Name { get; set; }
        public string Gender { get; set; }
        public DateTime JoiningDate { get; set; }
        public int YearOfExperience { get; set; }


        #region Constructors
        public Employee() { }
        public Employee(int employeeId, string name,
                         string gender, DateTime joiningDay,
                          int yearOfExperience)
        {
            EmployeeId = employeeId;
            Name = name;
            Gender = gender;
            JoiningDate = joiningDay;
            YearOfExperience = yearOfExperience;
        }
        #endregion

    }

    #region Methods
    private void AddEmployee(Employee emp)
    {
        emp.EmployeeId = employees.Count + 1;
        employees.Add(emp);
    }
    private void EditEmployee(Employee emp)
    {
        if (emp != null && emp.EmployeeId > 0)
        {
            int index = employees.FindIndex(a => a.EmployeeId == emp.EmployeeId);
            employees.RemoveAll(x => x.EmployeeId == emp.EmployeeId);
            employees.Insert(index, emp);

        }
    }
    private void DeleteEmployee()
    {

        _isDelete = true;
        if (employee != null && employee.EmployeeId > 0)
        {
            #region For MarSnackBar
            _index = employees.FindIndex(a => a.EmployeeId == employee.EmployeeId);
            tempEmp = new Employee(employee.EmployeeId,
                                    employee.Name,
                                    employee.Gender,
                                    employee.JoiningDate,
                                    employee.YearOfExperience);
            snackBar = true;
            #endregion

            employees.Remove(employee);
            _isDelete = false;
            this.StateHasChanged();
        }

    }
    private void UndoDelete()
    {
        if (tempEmp != null && _index > 0)
        {
            employees.Insert(_index,tempEmp);
            tempEmp = null;
            _index = -1;

        }

    }


    #endregion

    #region Dialog Box Methods
    private void OpenDialog(bool isEdit)
    {
        _isEdit = isEdit;
        if (!_isEdit) employee = new Employee();
        dialogIsOpen = true;
    }
    private void okClick() //Save employee Info
    {
        dialogIsOpen = false;
        if (!_isEdit) this.AddEmployee(employee);
        else this.EditEmployee(employee);
    }
    private void CloseDialog()
    {
        dialogIsOpen = false;
        if(selectedEmp !=null)
        {
            employee = selectedEmp;
            this.EditEmployee(selectedEmp);
        }
    }
    private void SelectionChangeEvent(object emp)
    {
        var currentEmp = (Employee)emp;
        if (currentEmp != null)
        {
            employee = currentEmp;
            selectedEmp = new Employee(currentEmp.EmployeeId,
               currentEmp.Name, currentEmp.Gender, currentEmp.JoiningDate, currentEmp.YearOfExperience);
        }
        else
        {
            selectedEmp = new Employee();
        }
        if (_isDelete) this.DeleteEmployee();
    }

    #endregion


#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
