// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Plana.Web.Pages.plan.lecturer
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Plana.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Plana.Web.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Plana.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\_Imports.razor"
using Plana.Web.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\Pages\plan\lecturer\MyPlanL.razor"
using Microsoft.Extensions.Logging;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\Pages\plan\lecturer\MyPlanL.razor"
using Plana.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\Pages\plan\lecturer\MyPlanL.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/myplanL/{Id}/{Id2}")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/myplanL")]
    public partial class MyPlanL : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 345 "C:\Code\PLANA\planning-of-the-assignments-for-lecturers-plana\1PlanaSolution\Plana.Web\Pages\plan\lecturer\MyPlanL.razor"
       
    string request { get; set; } = " | R";


    [Inject]
    NavigationManager NavigationMan { get; set; }

    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string Id2 { get; set; }

    [Inject]
    public ISemesterService SemesterService { get; set; }

    [Inject]
    public IPlanLecturerService PlanLecturerService { get; set; }

    public PlanLecturerDto PlanLecturer { get; set; } = new PlanLecturerDto();

    [Inject]
    public IPlanService PlanService { get; set; }

    [Inject]
    public IModuleRunService ModuleRunService { get; set; }



    [Inject]
    public ILecturerService LecturerService { get; set; }

    [Inject]
    public ILecturerModuleRunService LecturerModuleRunService { get; set; }

    [Inject]
    public IAdditionalAssignmentService AdditionalAssignmentService { get; set; }

    public PlanDto Plan { get; set; } = new PlanDto();

    public List<PlanDto> Plans { get; set; }

    public LecturerDto Lecturer { get; set; } = new LecturerDto();

    public ModuleRunDto ModuleRun { get; set; } = new ModuleRunDto();

    public List<ModuleRunDto> MyModuleRuns { get; set; } = new List<ModuleRunDto>();

    public List<ModuleRunDto> AllModuleRuns { get; set; } = new List<ModuleRunDto>();

    public List<ModuleRunDto> OtherModuleRuns { get; set; } = new List<ModuleRunDto>();

    public SemesterDto Semester { get; set; } = new SemesterDto();

    public List<SemesterDto> Semesters { get; set; } = new List<SemesterDto>();

    public SemesterDto AutumnSemester { get; set; }

    public SemesterDto SpringSemester { get; set; }

    public string SemesterId { get; set; }

    int idsl { get; set; }

    List<AdditionalAssignmentDto> additionalAssignments = new List<AdditionalAssignmentDto>();

    AdditionalAssignmentDto additionalAssignment{ get; set; } = new AdditionalAssignmentDto();

    public string AAHours { get; set; }

    public List<AdditionalAssignmentDto> MyAdditionalAssignments = new List<AdditionalAssignmentDto>();

    protected async override Task OnInitializedAsync()
    {

        int.TryParse(Id, out int LecturerId);
        int.TryParse(Id2, out int PlanId);

        if (LecturerId != 0 && PlanId != 0)
        {

            PlanLecturer = await PlanLecturerService.GetPlanLecturer(int.Parse(Id), int.Parse(Id2));

            Lecturer = await LecturerService.GetLecturer(int.Parse(Id2));
            Plan = await PlanService.GetPlan(int.Parse(Id));
            Plans = (await PlanService.GetPlans()).ToList();
            MyModuleRuns = (await PlanLecturerService.GetModuleRunsForPlan(Plan.Id, Lecturer.Id)).ToList();

            AutumnSemester = Plan.AutumnSemester;
            SpringSemester = Plan.SpringSemester;
           
            SelectedPlanId = Plan.Id;



            Semesters = new List<SemesterDto> { AutumnSemester, SpringSemester };
            additionalAssignments = (await AdditionalAssignmentService.GetAdditionalAssignments()).ToList();
            AAHours = additionalAssignment.AAHours.ToString();
            foreach (var aa in additionalAssignments) {
               
                    if ((aa.SemesterId == AutumnSemester.SemesterId||aa.SemesterId == SpringSemester.SemesterId) && aa.LecturerId == Lecturer.Id) {
                        MyAdditionalAssignments.Add(aa);
                    
                }
            }



        }
        else { PlanLecturer = new PlanLecturerDto { }; }
        Semester = new SemesterDto { };
    }
    #region plan selection

    [Parameter]
    public PlanDto SelectedPlan { get; set; } = new PlanDto();


    public int? SelectedPlanId { get; set; }



    public async Task NavigateToMyPlan()
    {
        //PlanLecturer = await PlanLecturerService.GetPlanLecturer(SelectedPlan.Id, Lecturer.Id);
        //if (PlanLecturer != null)
        //{

        string PlanId = Plan.Id.ToString();
        //NavigationMan.NavigateTo($"/myplanL/{SelectedPlanId}/{Lecturer.Id}", true);
        MyModuleRuns = (await PlanLecturerService.GetModuleRunsForPlan(Plan.Id, Lecturer.Id)).ToList();

    }

    //await Alert();

    #endregion
    #region Dialog box for add moduleRun
    bool _isDelete = false;
    bool dialogIsOpenMR = false;
    bool dialogIsOpenAA = false;
    bool _isEdit = false;
    private void OpenDialogMR(bool isEdit)
    {

        //if (!_isEdit) plan = new Plan();
        dialogIsOpenMR = true;
    }
    private void OpenDialogAA(bool isEdit)
    {
        dialogIsOpenAA = true;
    }

    private void okClick()
    {
        dialogIsOpenMR = false;
        dialogIsOpenAA = false;

    }

    private void CloseDialog()
    {
        dialogIsOpenMR = false;
        dialogIsOpenAA = false;
    }
    #endregion
    #region multiselection

    //public ModuleRunDto SelectedRun { get; set; } = new ModuleRunDto();


    bool loadFailed;

    /// <summary>
    /// method to add modules to the personal plan
    /// </summary>
    /// <returns></returns>
    public async Task SaveToMylist()
    {
        List<ModuleRunDto> modulesToAdd = new List<ModuleRunDto>();
        ModuleRunDto selectedModuleRun = new ModuleRunDto();
        try
        {
            foreach (var sem in Semesters)
            {
                foreach (var mr in sem.ModuleRuns)
                {
                    if (mr.isSelected == true )
                    {
                        selectedModuleRun = mr;
                        if (!MyModuleRuns.Contains(selectedModuleRun))
                        {
                            modulesToAdd.Add(selectedModuleRun);
                        }
                    }
                }
                //  modulesToAdd.Select(e => (e.isSelected == true)).ToList();
            }

            if (modulesToAdd != null)
            {
                foreach (var moduleRun in modulesToAdd)
                {
                    // if (MyModuleRuns.Contains(moduleRun)) { return; }

                    //if (moduleRun.isSelected == true)
                    //{
                    //    if (LecturerModuleRunService.GetLecturerModuleRun(moduleRun.ModuleRunId, Lecturer.Id) == null)
                    //    {
                    LecturerModuleRunDto newLecturerModuleRun = new LecturerModuleRunDto()
                    {
                        LecturerId = Lecturer.Id,
                        ModuleRunId = moduleRun.ModuleRunId

                    };
                    newLecturerModuleRun.IsRequested = true;
                    await LecturerModuleRunService.CreateLecturerModuleRun(newLecturerModuleRun);

                    okClick();
                    NavigationMan.NavigateTo($"/myplanL/{SelectedPlanId}/{Lecturer.Id}", true);
                }
            }

        }
        catch (Exception ex)
        {

            loadFailed = true;
            Logger.LogWarning(ex, "The selected Modules are already belong to your plan");
        }


    }

    [Parameter]
    public int tempLecturerModuleRunId { get; set; }
    LecturerModuleRunDto lmrToRemove { get; set; }

    /// <summary>
    /// method to remove the modules from the personal plan of lecturer
    /// </summary>

    public async Task RemoveFromMyList(int localLecturerModuleRunId)
    {
        bool isConfirm = await js.InvokeAsync<bool>("confirm", "do you want to delete selected module run from your list");

        tempLecturerModuleRunId = localLecturerModuleRunId;
        lmrToRemove = await LecturerModuleRunService.GetLecturerModuleRun(tempLecturerModuleRunId, Lecturer.Id);
        if (lmrToRemove.IsRequested == true && isConfirm)
        {

            await LecturerModuleRunService.DeleteLecturerModuleRun(tempLecturerModuleRunId, Lecturer.Id);
            MyModuleRuns = MyModuleRuns.Where(c => c.ModuleRunId != tempLecturerModuleRunId).ToList();

        }
        //NavigationMan.NavigateTo($"/myplanL/{SelectedPlanId}/{Lecturer.Id}", true);
    }
    [Parameter]
    public int tempAAId { get; set; }

    AdditionalAssignmentDto aaToDelete { get; set; }

    public async Task RemoveAA(int localAA) {
        bool isConfirm = await js.InvokeAsync<bool>("confirm", "do you want to delete selected additional assignment from your list");
        int tempAA = localAA;
        aaToDelete = await AdditionalAssignmentService.GetAdditionalAssignment(tempAA);
        if (isConfirm)
        {
            await AdditionalAssignmentService.SoftDeleteAdditionalAssignment(aaToDelete.AdditionalAssignmentId);
        }
    }


    #endregion
    #region
    public bool isDesiredHoursVisible { get; set; } = true;
    #endregion

    #region methods for additional assignment
    async Task Create() {
        Lecturer.AdditionalAssignments.Add(additionalAssignment);
        additionalAssignment.LecturerId = Lecturer.Id;
        await AdditionalAssignmentService.CreateAdditionalAssignment(additionalAssignment);
        NavigationMan.NavigateTo($"/myplanL/{SelectedPlanId}/{Lecturer.Id}", true);
    }
    #endregion

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private ILogger<MyPlanL> Logger { get; set; }
    }
}
#pragma warning restore 1591
