// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Plana.Api.Models;

namespace Plana.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200608002722_ne")]
    partial class ne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Plana.Models.AdditionalAssignment", b =>
                {
                    b.Property<int>("AdditionalAssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AAHours")
                        .HasColumnType("float");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdditionalAssignmentId");

                    b.HasIndex("LecturerId");

                    b.ToTable("AdditionalAssignments");

                    b.HasData(
                        new
                        {
                            AdditionalAssignmentId = 1,
                            AAHours = 0.0,
                            Title = "aF&E geplant"
                        },
                        new
                        {
                            AdditionalAssignmentId = 2,
                            AAHours = 0.0,
                            Title = "FB-Pool Abteilung Informatik"
                        });
                });

            modelBuilder.Entity("Plana.Models.Lecturer", b =>
                {
                    b.Property<int>("LecturerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ModuleRunId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WorkingRate")
                        .HasColumnType("float");

                    b.HasKey("LecturerId");

                    b.HasIndex("ModuleRunId");

                    b.ToTable("Lecturers");

                    b.HasData(
                        new
                        {
                            LecturerId = 1,
                            BirthDate = new DateTime(1982, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "johnblack@gmx.ch",
                            FirstName = "John",
                            Gender = 0,
                            IsActive = false,
                            IsDeleted = false,
                            LastName = "Black",
                            PhotoPath = "images/john.jpg",
                            Role = 0,
                            WorkingRate = 0.0
                        },
                        new
                        {
                            LecturerId = 2,
                            BirthDate = new DateTime(1976, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "manarodriges@gmx.ch",
                            FirstName = "Mana",
                            Gender = 0,
                            IsActive = false,
                            IsDeleted = false,
                            LastName = "Rodriges",
                            PhotoPath = "images/mana.jpg",
                            Role = 0,
                            WorkingRate = 0.0
                        },
                        new
                        {
                            LecturerId = 22,
                            BirthDate = new DateTime(1976, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "manarodriges@gmx.ch",
                            FirstName = "Manuela",
                            Gender = 0,
                            IsActive = false,
                            IsDeleted = true,
                            LastName = "Rodriges",
                            PhotoPath = "images/mana.jpg",
                            Role = 0,
                            WorkingRate = 0.0
                        },
                        new
                        {
                            LecturerId = 3,
                            BirthDate = new DateTime(1983, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "margowhite@gmx.ch",
                            FirstName = "Margo",
                            Gender = 1,
                            IsActive = false,
                            IsDeleted = false,
                            LastName = "White",
                            PhotoPath = "images/margo.jpg",
                            Role = 0,
                            WorkingRate = 0.0
                        });
                });

            modelBuilder.Entity("Plana.Models.LecturersModules", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int");

                    b.Property<int>("LecturerId")
                        .HasColumnType("int");

                    b.HasKey("ModuleId", "LecturerId");

                    b.HasIndex("LecturerId");

                    b.ToTable("LecturersModules");
                });

            modelBuilder.Entity("Plana.Models.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LectPerWeek")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalHours")
                        .HasColumnType("float");

                    b.HasKey("ModuleId");

                    b.ToTable("Modules");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            Code = "BZG1154",
                            LectPerWeek = 4,
                            Title = "Wahrscheinlichkeitsrechnung und Statistik",
                            TotalHours = 100.0
                        },
                        new
                        {
                            ModuleId = 2,
                            Code = "BTI7302",
                            LectPerWeek = 1,
                            Title = "Projekt 2",
                            TotalHours = 25.0
                        },
                        new
                        {
                            ModuleId = 3,
                            Code = "BTI7083",
                            LectPerWeek = 4,
                            Title = "User-Centered Design",
                            TotalHours = 100.0
                        },
                        new
                        {
                            ModuleId = 4,
                            Code = "BTI7272",
                            LectPerWeek = 8,
                            Title = "E-Business and Web",
                            TotalHours = 408.0
                        },
                        new
                        {
                            ModuleId = 5,
                            Code = "BTI7321",
                            LectPerWeek = 0,
                            Title = "Bachelor-Thesis",
                            TotalHours = 0.0
                        },
                        new
                        {
                            ModuleId = 6,
                            Code = "BTI7293",
                            LectPerWeek = 8,
                            Title = "Smart Data-Driven Application",
                            TotalHours = 516.0
                        },
                        new
                        {
                            ModuleId = 7,
                            Code = "BTI7512",
                            LectPerWeek = 2,
                            Title = "Einführung in C#",
                            TotalHours = 109.0
                        },
                        new
                        {
                            ModuleId = 8,
                            Code = "BTI7538",
                            LectPerWeek = 2,
                            Title = "Grundlagen Geoinformationssysteme",
                            TotalHours = 100.0
                        },
                        new
                        {
                            ModuleId = 9,
                            Code = "BTX8081",
                            LectPerWeek = 6,
                            Title = "Software Engineering and Design",
                            TotalHours = 300.0
                        },
                        new
                        {
                            ModuleId = 10,
                            Code = "BTX8082",
                            LectPerWeek = 4,
                            Title = "Software Engineering and Design",
                            TotalHours = 200.0
                        },
                        new
                        {
                            ModuleId = 11,
                            Code = "BTI1311",
                            LectPerWeek = 4,
                            Title = "Databases (F)",
                            TotalHours = 208.0
                        },
                        new
                        {
                            ModuleId = 12,
                            Code = "BTI1311",
                            LectPerWeek = 4,
                            Title = "Databases (F)",
                            TotalHours = 208.0
                        },
                        new
                        {
                            ModuleId = 13,
                            Code = "BTW2201",
                            LectPerWeek = 4,
                            Title = "Datenbanken",
                            TotalHours = 200.0
                        },
                        new
                        {
                            ModuleId = 14,
                            Code = "",
                            LectPerWeek = 4,
                            Title = "Studienberatung SG I",
                            TotalHours = 200.0
                        });
                });

            modelBuilder.Entity("Plana.Models.ModuleRun", b =>
                {
                    b.Property<int>("ModuleRunId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ModuleId")
                        .HasColumnType("int");

                    b.Property<double>("ModuleRunRate")
                        .HasColumnType("float");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SemesterId")
                        .HasColumnType("int");

                    b.HasKey("ModuleRunId");

                    b.HasIndex("ModuleId");

                    b.HasIndex("SemesterId");

                    b.ToTable("ModuleRuns");
                });

            modelBuilder.Entity("Plana.Models.Semester", b =>
                {
                    b.Property<int>("SemesterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("SemesterId");

                    b.ToTable("Semesters");

                    b.HasData(
                        new
                        {
                            SemesterId = 1,
                            Code = "2020-2021 - FS",
                            Date = new DateTime(2021, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            SemesterId = 2,
                            Code = "2021-2022 - HS",
                            Date = new DateTime(2021, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Plana.Models.StudyBranch", b =>
                {
                    b.Property<int>("StudyBranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudyBranchId");

                    b.ToTable("StudyBranches");
                });

            modelBuilder.Entity("Plana.Models.AdditionalAssignment", b =>
                {
                    b.HasOne("Plana.Models.Lecturer", "Lecturer")
                        .WithMany()
                        .HasForeignKey("LecturerId");
                });

            modelBuilder.Entity("Plana.Models.Lecturer", b =>
                {
                    b.HasOne("Plana.Models.ModuleRun", null)
                        .WithMany("Lecturers")
                        .HasForeignKey("ModuleRunId");
                });

            modelBuilder.Entity("Plana.Models.LecturersModules", b =>
                {
                    b.HasOne("Plana.Models.Lecturer", "Lecturer")
                        .WithMany("Modules")
                        .HasForeignKey("LecturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Plana.Models.Module", "Module")
                        .WithMany("Lecturers")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Plana.Models.ModuleRun", b =>
                {
                    b.HasOne("Plana.Models.Module", "Module")
                        .WithMany("ModuleRuns")
                        .HasForeignKey("ModuleId");

                    b.HasOne("Plana.Models.Semester", "Semester")
                        .WithMany()
                        .HasForeignKey("SemesterId");
                });
#pragma warning restore 612, 618
        }
    }
}
